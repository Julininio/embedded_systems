
embedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000540  00800200  00001dba  00001e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800740  00800740  0000238e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000238e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002430  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000338c  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f87  00000000  00000000  000059e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001451  00000000  00000000  0000696b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00007dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b8e  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015a6  00000000  00000000  00008e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000a420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	d9 c7       	rjmp	.+4018   	; 0xfb8 <__vector_1>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
      2e:	00 00       	nop
      30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop
      98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	60 c0       	rjmp	.+192    	; 0x16e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5e c0       	rjmp	.+188    	; 0x16e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5c c0       	rjmp	.+184    	; 0x16e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5a c0       	rjmp	.+180    	; 0x16e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	58 c0       	rjmp	.+176    	; 0x16e <__bad_interrupt>
      be:	00 00       	nop
      c0:	56 c0       	rjmp	.+172    	; 0x16e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	54 c0       	rjmp	.+168    	; 0x16e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	52 c0       	rjmp	.+164    	; 0x16e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	50 c0       	rjmp	.+160    	; 0x16e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4e c0       	rjmp	.+156    	; 0x16e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4c c0       	rjmp	.+152    	; 0x16e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4a c0       	rjmp	.+148    	; 0x16e <__bad_interrupt>
      da:	00 00       	nop
      dc:	48 c0       	rjmp	.+144    	; 0x16e <__bad_interrupt>
      de:	00 00       	nop
      e0:	46 c0       	rjmp	.+140    	; 0x16e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	67 06       	cpc	r6, r23
      e6:	d2 06       	cpc	r13, r18
      e8:	ee 06       	cpc	r14, r30
      ea:	f0 06       	cpc	r15, r16
      ec:	f2 06       	cpc	r15, r18
      ee:	fe 06       	cpc	r15, r30
      f0:	14 07       	cpc	r17, r20
      f2:	16 07       	cpc	r17, r22
      f4:	26 07       	cpc	r18, r22
      f6:	2e 07       	cpc	r18, r30
      f8:	2e 07       	cpc	r18, r30
      fa:	2e 07       	cpc	r18, r30
      fc:	2e 07       	cpc	r18, r30
      fe:	2e 07       	cpc	r18, r30
     100:	2e 07       	cpc	r18, r30
     102:	2e 07       	cpc	r18, r30
     104:	2e 07       	cpc	r18, r30
     106:	2e 07       	cpc	r18, r30
     108:	2e 07       	cpc	r18, r30
     10a:	2e 07       	cpc	r18, r30
     10c:	2e 07       	cpc	r18, r30
     10e:	2e 07       	cpc	r18, r30
     110:	2e 07       	cpc	r18, r30
     112:	2e 07       	cpc	r18, r30
     114:	2e 07       	cpc	r18, r30
     116:	2e 07       	cpc	r18, r30
     118:	2e 07       	cpc	r18, r30
     11a:	2e 07       	cpc	r18, r30
     11c:	2e 07       	cpc	r18, r30
     11e:	2e 07       	cpc	r18, r30
     120:	2e 07       	cpc	r18, r30
     122:	2e 07       	cpc	r18, r30
     124:	28 07       	cpc	r18, r24

00000126 <__trampolines_end>:
     126:	63 64       	ori	r22, 0x43	; 67
     128:	69 6e       	ori	r22, 0xE9	; 233
     12a:	6f 70       	andi	r22, 0x0F	; 15
     12c:	73 75       	andi	r23, 0x53	; 83
     12e:	78 58       	subi	r23, 0x88	; 136
     130:	5b 00       	.word	0x005b	; ????

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d1 e2       	ldi	r29, 0x21	; 33
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_copy_data>:
     13e:	17 e0       	ldi	r17, 0x07	; 7
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	ea eb       	ldi	r30, 0xBA	; 186
     146:	fd e1       	ldi	r31, 0x1D	; 29
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	a0 34       	cpi	r26, 0x40	; 64
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	27 e0       	ldi	r18, 0x07	; 7
     15a:	a0 e4       	ldi	r26, 0x40	; 64
     15c:	b7 e0       	ldi	r27, 0x07	; 7
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a9 35       	cpi	r26, 0x59	; 89
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	ec d6       	rcall	.+3544   	; 0xf42 <main>
     16a:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <getChildCount>:
}

void intToString(int number, char *buffer)
{
	sprintf(buffer, "%d", number);
}
     170:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <EEPROM_ADDRESS_CHILD_COUNT>
     174:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <EEPROM_ADDRESS_CHILD_COUNT+0x1>
     178:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <eeprom_read_word>
     17c:	08 95       	ret

0000017e <getAdultCount>:
     17e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <EEPROM_ADDRESS_ADULT_COUNT>
     182:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <EEPROM_ADDRESS_ADULT_COUNT+0x1>
     186:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <eeprom_read_word>
     18a:	08 95       	ret

0000018c <getTotalCount>:
     18c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <EEPROM_ADDRESS_TOTAL_COUNT>
     190:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <EEPROM_ADDRESS_TOTAL_COUNT+0x1>
     194:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <eeprom_read_word>
     198:	08 95       	ret

0000019a <removeTrailingNulls>:
     19a:	dc 01       	movw	r26, r24
     19c:	fc 01       	movw	r30, r24
     19e:	01 90       	ld	r0, Z+
     1a0:	00 20       	and	r0, r0
     1a2:	e9 f7       	brne	.-6      	; 0x19e <removeTrailingNulls+0x4>
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	9f 01       	movw	r18, r30
     1a8:	28 1b       	sub	r18, r24
     1aa:	39 0b       	sbc	r19, r25
     1ac:	21 50       	subi	r18, 0x01	; 1
     1ae:	31 09       	sbc	r19, r1
     1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <removeTrailingNulls+0x2a>
     1b2:	fd 01       	movw	r30, r26
     1b4:	e2 0f       	add	r30, r18
     1b6:	f3 1f       	adc	r31, r19
     1b8:	90 81       	ld	r25, Z
     1ba:	91 11       	cpse	r25, r1
     1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <removeTrailingNulls+0x2e>
     1be:	10 82       	st	Z, r1
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	31 09       	sbc	r19, r1
     1c4:	33 23       	and	r19, r19
     1c6:	ac f7       	brge	.-22     	; 0x1b2 <removeTrailingNulls+0x18>
     1c8:	cd 01       	movw	r24, r26
     1ca:	08 95       	ret

000001cc <USART_Init>:
     1cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     1d0:	83 e3       	ldi	r24, 0x33	; 51
     1d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     1d6:	88 e1       	ldi	r24, 0x18	; 24
     1d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     1dc:	86 e0       	ldi	r24, 0x06	; 6
     1de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     1e2:	08 95       	ret

000001e4 <USART_Transmit>:
     1e4:	dc 01       	movw	r26, r24
     1e6:	fc 01       	movw	r30, r24
     1e8:	01 90       	ld	r0, Z+
     1ea:	00 20       	and	r0, r0
     1ec:	e9 f7       	brne	.-6      	; 0x1e8 <USART_Transmit+0x4>
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	af 01       	movw	r20, r30
     1f2:	48 1b       	sub	r20, r24
     1f4:	59 0b       	sbc	r21, r25
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	0c c0       	rjmp	.+24     	; 0x214 <USART_Transmit+0x30>
     1fc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     200:	95 ff       	sbrs	r25, 5
     202:	fc cf       	rjmp	.-8      	; 0x1fc <USART_Transmit+0x18>
     204:	fd 01       	movw	r30, r26
     206:	e2 0f       	add	r30, r18
     208:	f3 1f       	adc	r31, r19
     20a:	90 81       	ld	r25, Z
     20c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     210:	2f 5f       	subi	r18, 0xFF	; 255
     212:	3f 4f       	sbci	r19, 0xFF	; 255
     214:	24 17       	cp	r18, r20
     216:	35 07       	cpc	r19, r21
     218:	8c f3       	brlt	.-30     	; 0x1fc <USART_Transmit+0x18>
     21a:	08 95       	ret

0000021c <USART_Receive>:
     21c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     220:	88 23       	and	r24, r24
     222:	e4 f7       	brge	.-8      	; 0x21c <USART_Receive>
     224:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     228:	08 95       	ret

0000022a <USART_TransmitInt>:
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	64 97       	sbiw	r28, 0x14	; 20
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	9f 93       	push	r25
     244:	8f 93       	push	r24
     246:	8b ed       	ldi	r24, 0xDB	; 219
     248:	92 e0       	ldi	r25, 0x02	; 2
     24a:	9f 93       	push	r25
     24c:	8f 93       	push	r24
     24e:	8e 01       	movw	r16, r28
     250:	0f 5f       	subi	r16, 0xFF	; 255
     252:	1f 4f       	sbci	r17, 0xFF	; 255
     254:	1f 93       	push	r17
     256:	0f 93       	push	r16
     258:	4d d7       	rcall	.+3738   	; 0x10f4 <sprintf>
     25a:	c8 01       	movw	r24, r16
     25c:	c3 df       	rcall	.-122    	; 0x1e4 <USART_Transmit>
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
     26a:	64 96       	adiw	r28, 0x14	; 20
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <checkCredentials>:

int checkCredentials(char *username, char *password)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	eb 01       	movw	r28, r22
	// Perform authentication logic here
	// Return 1 if authentication is successful, 0 otherwise
	// Example:
	if (strcmp(username, "Silver") == 0 && strcmp(password, "123") == 0)
     286:	6f e0       	ldi	r22, 0x0F	; 15
     288:	72 e0       	ldi	r23, 0x02	; 2
     28a:	fc d6       	rcall	.+3576   	; 0x1084 <strcmp>
     28c:	89 2b       	or	r24, r25
     28e:	49 f4       	brne	.+18     	; 0x2a2 <checkCredentials+0x22>
     290:	66 e1       	ldi	r22, 0x16	; 22
     292:	72 e0       	ldi	r23, 0x02	; 2
     294:	ce 01       	movw	r24, r28
     296:	f6 d6       	rcall	.+3564   	; 0x1084 <strcmp>
     298:	89 2b       	or	r24, r25
     29a:	31 f0       	breq	.+12     	; 0x2a8 <checkCredentials+0x28>
	{
		return 1;
	}
	else
	{
		return 0;
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	05 c0       	rjmp	.+10     	; 0x2ac <checkCredentials+0x2c>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <checkCredentials+0x2c>
	// Perform authentication logic here
	// Return 1 if authentication is successful, 0 otherwise
	// Example:
	if (strcmp(username, "Silver") == 0 && strcmp(password, "123") == 0)
	{
		return 1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <USART_ReceiveString>:

void USART_ReceiveString(char *buffer, int maxLength)
{
     2b2:	cf 92       	push	r12
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	6c 01       	movw	r12, r24
     2c2:	7b 01       	movw	r14, r22
	int i = 0;
     2c4:	00 e0       	ldi	r16, 0x00	; 0
     2c6:	10 e0       	ldi	r17, 0x00	; 0
	char receivedChar;

	// Receive characters until a newline or until maxLength is reached
	while (i < maxLength - 1)
     2c8:	0e c0       	rjmp	.+28     	; 0x2e6 <USART_ReceiveString+0x34>
	{
		receivedChar = USART_Receive();
     2ca:	a8 df       	rcall	.-176    	; 0x21c <USART_Receive>
     2cc:	c8 2f       	mov	r28, r24

		// Echo the received character back to the user
		USART_Transmit(receivedChar);
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	89 df       	rcall	.-238    	; 0x1e4 <USART_Transmit>

		// Check for newline character (end of input)
		if (receivedChar == '\n' || receivedChar == '\r')
     2d2:	ca 30       	cpi	r28, 0x0A	; 10
     2d4:	69 f0       	breq	.+26     	; 0x2f0 <USART_ReceiveString+0x3e>
     2d6:	cd 30       	cpi	r28, 0x0D	; 13
     2d8:	59 f0       	breq	.+22     	; 0x2f0 <USART_ReceiveString+0x3e>
		{
			break;
		}

		// Store the received character in the buffer
		buffer[i++] = receivedChar;
     2da:	f6 01       	movw	r30, r12
     2dc:	e0 0f       	add	r30, r16
     2de:	f1 1f       	adc	r31, r17
     2e0:	c0 83       	st	Z, r28
     2e2:	0f 5f       	subi	r16, 0xFF	; 255
     2e4:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int i = 0;
	char receivedChar;

	// Receive characters until a newline or until maxLength is reached
	while (i < maxLength - 1)
     2e6:	c7 01       	movw	r24, r14
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	08 17       	cp	r16, r24
     2ec:	19 07       	cpc	r17, r25
     2ee:	6c f3       	brlt	.-38     	; 0x2ca <USART_ReceiveString+0x18>
		// Store the received character in the buffer
		buffer[i++] = receivedChar;
	}

	// Null-terminate the string
	buffer[i] = '\0';
     2f0:	f6 01       	movw	r30, r12
     2f2:	e0 0f       	add	r30, r16
     2f4:	f1 1f       	adc	r31, r17
     2f6:	10 82       	st	Z, r1
}
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	ff 90       	pop	r15
     300:	ef 90       	pop	r14
     302:	df 90       	pop	r13
     304:	cf 90       	pop	r12
     306:	08 95       	ret

00000308 <USART_ReadInteger>:

int USART_ReadInteger()
{
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	66 97       	sbiw	r28, 0x16	; 22
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	int num;
	USART_ReceiveString(buffer, sizeof(buffer));
     320:	64 e1       	ldi	r22, 0x14	; 20
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	8e 01       	movw	r16, r28
     326:	0f 5f       	subi	r16, 0xFF	; 255
     328:	1f 4f       	sbci	r17, 0xFF	; 255
     32a:	c8 01       	movw	r24, r16
     32c:	c2 df       	rcall	.-124    	; 0x2b2 <USART_ReceiveString>
	sscanf(buffer, "%d", &num);
     32e:	ce 01       	movw	r24, r28
     330:	45 96       	adiw	r24, 0x15	; 21
     332:	9f 93       	push	r25
     334:	8f 93       	push	r24
     336:	8b ed       	ldi	r24, 0xDB	; 219
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	9f 93       	push	r25
     33c:	8f 93       	push	r24
     33e:	1f 93       	push	r17
     340:	0f 93       	push	r16
     342:	06 d7       	rcall	.+3596   	; 0x1150 <sscanf>
	return num;
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
}
     350:	8d 89       	ldd	r24, Y+21	; 0x15
     352:	9e 89       	ldd	r25, Y+22	; 0x16
     354:	66 96       	adiw	r28, 0x16	; 22
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <getOption>:

char getOption()
{
     36a:	cf 93       	push	r28
	char option;
	option = USART_Receive();
     36c:	57 df       	rcall	.-338    	; 0x21c <USART_Receive>
     36e:	c8 2f       	mov	r28, r24
	USART_Transmit("\r\n"); // Print newline to move to the next line
     370:	8b e5       	ldi	r24, 0x5B	; 91
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	37 df       	rcall	.-402    	; 0x1e4 <USART_Transmit>
	return option;
}
     376:	8c 2f       	mov	r24, r28
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <replenishFridge>:
{
	char inputBuffer[20];
	int bottlesToAdd;
	int desiredBottles = 50;  // Desired number of bottles in the fridge

	USART_Transmit("Number of bottles in the fridge: ");
     37c:	8a e1       	ldi	r24, 0x1A	; 26
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	31 df       	rcall	.-414    	; 0x1e4 <USART_Transmit>
	USART_TransmitInt(waterBottles);
     382:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <waterBottles>
     386:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <waterBottles+0x1>
     38a:	4f df       	rcall	.-354    	; 0x22a <USART_TransmitInt>
	USART_Transmit("\r\n");
     38c:	8b e5       	ldi	r24, 0x5B	; 91
     38e:	94 e0       	ldi	r25, 0x04	; 4
     390:	29 df       	rcall	.-430    	; 0x1e4 <USART_Transmit>

	// number of bottles to add 
	bottlesToAdd = desiredBottles - waterBottles;
     392:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <waterBottles>
     396:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <waterBottles+0x1>
     39a:	82 e3       	ldi	r24, 0x32	; 50
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	82 1b       	sub	r24, r18
     3a0:	93 0b       	sbc	r25, r19

	if (bottlesToAdd > 0) {
     3a2:	18 16       	cp	r1, r24
     3a4:	19 06       	cpc	r1, r25
     3a6:	ac f4       	brge	.+42     	; 0x3d2 <replenishFridge+0x56>
		waterBottles += bottlesToAdd;
     3a8:	82 e3       	ldi	r24, 0x32	; 50
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <waterBottles+0x1>
     3b0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <waterBottles>
		USART_Transmit("Replenishing done.\r\n");
     3b4:	8c e3       	ldi	r24, 0x3C	; 60
     3b6:	92 e0       	ldi	r25, 0x02	; 2
		USART_Transmit("Number of bottles in the fridge: ");
     3b8:	15 df       	rcall	.-470    	; 0x1e4 <USART_Transmit>
     3ba:	8a e1       	ldi	r24, 0x1A	; 26
     3bc:	92 e0       	ldi	r25, 0x02	; 2
		USART_TransmitInt(waterBottles);
     3be:	12 df       	rcall	.-476    	; 0x1e4 <USART_Transmit>
     3c0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <waterBottles>
     3c4:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <waterBottles+0x1>
		USART_Transmit("\r\n");
     3c8:	30 df       	rcall	.-416    	; 0x22a <USART_TransmitInt>
     3ca:	8b e5       	ldi	r24, 0x5B	; 91
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	0a cf       	rjmp	.-492    	; 0x1e4 <USART_Transmit>
		} else {
		USART_Transmit("Fridge is already stocked with enough bottles.\r\n");
     3d0:	08 95       	ret
     3d2:	81 e5       	ldi	r24, 0x51	; 81
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	06 cf       	rjmp	.-500    	; 0x1e4 <USART_Transmit>
     3d8:	08 95       	ret

000003da <isParkFull>:

}

bool isParkFull()
{
	totalTourists = eeprom_read_word((uint16_t *)EEPROM_ADDRESS_TOTAL_COUNT);
     3da:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <EEPROM_ADDRESS_TOTAL_COUNT>
     3de:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <EEPROM_ADDRESS_TOTAL_COUNT+0x1>
     3e2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <eeprom_read_word>
     3e6:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <totalTourists+0x1>
     3ea:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <totalTourists>
	if (totalTourists > PARK_MAX_CAP)
     3ee:	89 3c       	cpi	r24, 0xC9	; 201
     3f0:	91 05       	cpc	r25, r1
     3f2:	14 f0       	brlt	.+4      	; 0x3f8 <isParkFull+0x1e>
		return true;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	08 95       	ret
	return false;
     3f8:	80 e0       	ldi	r24, 0x00	; 0
}
     3fa:	08 95       	ret

000003fc <saveCarInfo>:

void saveCarInfo(char numberPlate[CAR_INFO_SIZE])
{
	if (countNumberPlates >= 1)
     3fc:	20 91 43 07 	lds	r18, 0x0743	; 0x800743 <countNumberPlates>
     400:	30 91 44 07 	lds	r19, 0x0744	; 0x800744 <countNumberPlates+0x1>
     404:	12 16       	cp	r1, r18
     406:	13 06       	cpc	r1, r19
     408:	dc f4       	brge	.+54     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		eeprom_write_block(numberPlate, (void *)EEPROM_ADDRESS_NUMBER_PLATES, CAR_INFO_SIZE);
     40a:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     40e:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     412:	4f e0       	ldi	r20, 0x0F	; 15
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <eeprom_write_block>
		countNumberPlates += 1;
     41a:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <countNumberPlates>
     41e:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <countNumberPlates+0x1>
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <countNumberPlates+0x1>
     428:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <countNumberPlates>
		EEPROM_ADDRESS_NUMBER_PLATES += CAR_INFO_SIZE;
     42c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     430:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     434:	0f 96       	adiw	r24, 0x0f	; 15
     436:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     43a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
		return;
     43e:	08 95       	ret
	}

	eeprom_write_block(numberPlate, (void *)EEPROM_ADDRESS_NUMBER_PLATES, CAR_INFO_SIZE);
     440:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     444:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     448:	4f e0       	ldi	r20, 0x0F	; 15
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <eeprom_write_block>
	countNumberPlates += 1;
     450:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <countNumberPlates>
     454:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <countNumberPlates+0x1>
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <countNumberPlates+0x1>
     45e:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <countNumberPlates>
	EEPROM_ADDRESS_NUMBER_PLATES += CAR_INFO_SIZE;
     462:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     466:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     46a:	0f 96       	adiw	r24, 0x0f	; 15
     46c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     470:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     474:	08 95       	ret

00000476 <getMaxAddress>:
}

uint16_t getMaxAddress()
{
	uint16_t maxAddress = EEPROM_ADDRESS_NUMBER_PLATES;
     476:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     47a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
	if (EEPROM_ADDRESS_NUMBER_PLATES > 40)
     47e:	89 32       	cpi	r24, 0x29	; 41
     480:	91 05       	cpc	r25, r1
     482:	08 f0       	brcs	.+2      	; 0x486 <getMaxAddress+0x10>
		maxAddress = EEPROM_ADDRESS_NUMBER_PLATES - CAR_INFO_SIZE;
     484:	0f 97       	sbiw	r24, 0x0f	; 15

	return maxAddress;
}
     486:	08 95       	ret

00000488 <displayCarsInsidePark>:

void displayCarsInsidePark()
{
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	2f 97       	sbiw	r28, 0x0f	; 15
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
	USART_Transmit("Number of cars: ");
     4a8:	82 e8       	ldi	r24, 0x82	; 130
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	9b de       	rcall	.-714    	; 0x1e4 <USART_Transmit>
	USART_TransmitInt(countNumberPlates);
     4ae:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <countNumberPlates>
     4b2:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <countNumberPlates+0x1>
     4b6:	b9 de       	rcall	.-654    	; 0x22a <USART_TransmitInt>
	USART_Transmit("\r\n");
     4b8:	8b e5       	ldi	r24, 0x5B	; 91
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	93 de       	rcall	.-730    	; 0x1e4 <USART_Transmit>

	USART_Transmit("Number plate - Children - Adults");
     4be:	83 e9       	ldi	r24, 0x93	; 147
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	90 de       	rcall	.-736    	; 0x1e4 <USART_Transmit>
	USART_Transmit("\r\n");
     4c4:	8b e5       	ldi	r24, 0x5B	; 91
     4c6:	94 e0       	ldi	r25, 0x04	; 4
     4c8:	8d de       	rcall	.-742    	; 0x1e4 <USART_Transmit>
     4ca:	d5 df       	rcall	.-86     	; 0x476 <getMaxAddress>

	int count = 1;
	char carInfo[15];
	uint16_t maxAddress = getMaxAddress();
     4cc:	6c 01       	movw	r12, r24
     4ce:	20 91 43 07 	lds	r18, 0x0743	; 0x800743 <countNumberPlates>

	for (uint16_t i = (EEPROM_ADDRESS_NUMBER_PLATES - (countNumberPlates * CAR_INFO_SIZE)); i <= maxAddress; i += CAR_INFO_SIZE)
     4d2:	30 91 44 07 	lds	r19, 0x0744	; 0x800744 <countNumberPlates+0x1>
     4d6:	41 ef       	ldi	r20, 0xF1	; 241
     4d8:	42 03       	mulsu	r20, r18
     4da:	80 01       	movw	r16, r0
     4dc:	43 9f       	mul	r20, r19
     4de:	10 0d       	add	r17, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     4e6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     4ea:	08 0f       	add	r16, r24
     4ec:	19 1f       	adc	r17, r25
     4ee:	ee 24       	eor	r14, r14
     4f0:	e3 94       	inc	r14
	USART_Transmit("\r\n");

	USART_Transmit("Number plate - Children - Adults");
	USART_Transmit("\r\n");

	int count = 1;
     4f2:	f1 2c       	mov	r15, r1
     4f4:	17 c0       	rjmp	.+46     	; 0x524 <displayCarsInsidePark+0x9c>
     4f6:	4f e0       	ldi	r20, 0x0F	; 15
	char carInfo[15];
	uint16_t maxAddress = getMaxAddress();

	for (uint16_t i = (EEPROM_ADDRESS_NUMBER_PLATES - (countNumberPlates * CAR_INFO_SIZE)); i <= maxAddress; i += CAR_INFO_SIZE)
     4f8:	50 e0       	ldi	r21, 0x00	; 0
	{
		eeprom_read_block(carInfo, (void *)i, CAR_INFO_SIZE);
     4fa:	b8 01       	movw	r22, r16
     4fc:	ce 01       	movw	r24, r28
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <eeprom_read_block>
		USART_TransmitInt(count);
     504:	c7 01       	movw	r24, r14
     506:	91 de       	rcall	.-734    	; 0x22a <USART_TransmitInt>
		USART_Transmit(": ");
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	6b de       	rcall	.-810    	; 0x1e4 <USART_Transmit>
		USART_Transmit(carInfo);
     50e:	ce 01       	movw	r24, r28
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	68 de       	rcall	.-816    	; 0x1e4 <USART_Transmit>
     514:	8b e5       	ldi	r24, 0x5B	; 91
		USART_Transmit("\r\n");
     516:	94 e0       	ldi	r25, 0x04	; 4
     518:	65 de       	rcall	.-822    	; 0x1e4 <USART_Transmit>
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	e8 1a       	sub	r14, r24
		count++;
     51e:	f8 0a       	sbc	r15, r24
     520:	01 5f       	subi	r16, 0xF1	; 241
     522:	1f 4f       	sbci	r17, 0xFF	; 255

	int count = 1;
	char carInfo[15];
	uint16_t maxAddress = getMaxAddress();

	for (uint16_t i = (EEPROM_ADDRESS_NUMBER_PLATES - (countNumberPlates * CAR_INFO_SIZE)); i <= maxAddress; i += CAR_INFO_SIZE)
     524:	c0 16       	cp	r12, r16
     526:	d1 06       	cpc	r13, r17
     528:	30 f7       	brcc	.-52     	; 0x4f6 <displayCarsInsidePark+0x6e>
     52a:	2f 96       	adiw	r28, 0x0f	; 15
     52c:	0f b6       	in	r0, 0x3f	; 63
		USART_Transmit(": ");
		USART_Transmit(carInfo);
		USART_Transmit("\r\n");
		count++;
	}
}
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	08 95       	ret

00000548 <clearEEPROMMemoryRange>:
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
	USART_TransmitInt(collectedMoney);
	USART_Transmit("\r\n");
}

void clearEEPROMMemoryRange(uint16_t start, uint16_t end)
{
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	8b 01       	movw	r16, r22
	uint8_t clearValue = 0xFF;
	for (uint16_t addr = start; addr < end; addr++)
     554:	05 c0       	rjmp	.+10     	; 0x560 <clearEEPROMMemoryRange+0x18>
	{
		eeprom_write_byte((uint8_t *)addr, clearValue);
     556:	6f ef       	ldi	r22, 0xFF	; 255
     558:	ce 01       	movw	r24, r28
     55a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <eeprom_write_byte>
}

void clearEEPROMMemoryRange(uint16_t start, uint16_t end)
{
	uint8_t clearValue = 0xFF;
	for (uint16_t addr = start; addr < end; addr++)
     55e:	21 96       	adiw	r28, 0x01	; 1
     560:	c0 17       	cp	r28, r16
     562:	d1 07       	cpc	r29, r17
     564:	c0 f3       	brcs	.-16     	; 0x556 <clearEEPROMMemoryRange+0xe>
	{
		eeprom_write_byte((uint8_t *)addr, clearValue);
	}
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret

00000570 <resetControllerEEPROM>:
	uint16_t eepromAddress = 0;

	// we choose to use the getMaxAddress() since it only resets those addresses that
	// we wrote to instead of having to do all the memory(using E2END).
	// This saves us a lot of time.
	clearEEPROMMemoryRange(0, getMaxAddress());
     570:	82 df       	rcall	.-252    	; 0x476 <getMaxAddress>
     572:	bc 01       	movw	r22, r24
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	e7 df       	rcall	.-50     	; 0x548 <clearEEPROMMemoryRange>

	USART_Transmit("Resetting controller successful.");
     57a:	84 eb       	ldi	r24, 0xB4	; 180
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	32 de       	rcall	.-924    	; 0x1e4 <USART_Transmit>
	USART_Transmit("\r\n");
     580:	8b e5       	ldi	r24, 0x5B	; 91
     582:	94 e0       	ldi	r25, 0x04	; 4
     584:	2f ce       	rjmp	.-930    	; 0x1e4 <USART_Transmit>
     586:	08 95       	ret

00000588 <updateChildrenInParkCount>:
     588:	bc 01       	movw	r22, r24
	}
}

void updateChildrenInParkCount(int count)
{
	eeprom_write_word((uint16_t *)EEPROM_ADDRESS_CHILD_COUNT, count);
     58a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <EEPROM_ADDRESS_CHILD_COUNT>
     58e:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <EEPROM_ADDRESS_CHILD_COUNT+0x1>
     592:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <eeprom_write_word>
     596:	08 95       	ret

00000598 <updateAdultsInParkCount>:
}

void updateAdultsInParkCount(int count)
{
	eeprom_write_word((uint16_t *)EEPROM_ADDRESS_ADULT_COUNT, count);
     598:	bc 01       	movw	r22, r24
     59a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <EEPROM_ADDRESS_ADULT_COUNT>
     59e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <EEPROM_ADDRESS_ADULT_COUNT+0x1>
     5a2:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <eeprom_write_word>
     5a6:	08 95       	ret

000005a8 <updateTotalPeopleInParkCount>:
}

void updateTotalPeopleInParkCount(int count)
{
	eeprom_write_word((uint16_t *)EEPROM_ADDRESS_TOTAL_COUNT, count);
     5a8:	bc 01       	movw	r22, r24
     5aa:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <EEPROM_ADDRESS_TOTAL_COUNT>
     5ae:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <EEPROM_ADDRESS_TOTAL_COUNT+0x1>
     5b2:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <eeprom_write_word>
     5b6:	08 95       	ret

000005b8 <initialiseEEPROM>:
	return str;
}

void initialiseEEPROM()
{
	updateChildrenInParkCount(0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	e5 df       	rcall	.-54     	; 0x588 <updateChildrenInParkCount>
	updateAdultsInParkCount(0);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	ea df       	rcall	.-44     	; 0x598 <updateAdultsInParkCount>
	updateTotalPeopleInParkCount(0);
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	ef cf       	rjmp	.-34     	; 0x5a8 <updateTotalPeopleInParkCount>
     5ca:	08 95       	ret

000005cc <saveCar>:
{
	eeprom_write_word((uint16_t *)EEPROM_ADDRESS_TOTAL_COUNT, count);
}

void saveCar(char numberPlate[10], int occupantsBelowTen, int occupantsAboveTen)
{
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	2f 97       	sbiw	r28, 0x0f	; 15
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	7b 01       	movw	r14, r22
     5ee:	8a 01       	movw	r16, r20
	char formattedCarInfo[15];
	sprintf(formattedCarInfo, "%s-%d-%d", numberPlate, occupantsBelowTen, occupantsAboveTen);
     5f0:	1f 93       	push	r17
     5f2:	4f 93       	push	r20
     5f4:	ff 92       	push	r15
     5f6:	6f 93       	push	r22
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	85 ed       	ldi	r24, 0xD5	; 213
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	ce 01       	movw	r24, r28
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	6c 01       	movw	r12, r24
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	72 d5       	rcall	.+2788   	; 0x10f4 <sprintf>
	saveCarInfo(formattedCarInfo);
     610:	c6 01       	movw	r24, r12

	updateChildrenInParkCount(getChildCount() + occupantsBelowTen);
     612:	f4 de       	rcall	.-536    	; 0x3fc <saveCarInfo>
     614:	ad dd       	rcall	.-1190   	; 0x170 <getChildCount>
     616:	8e 0d       	add	r24, r14
     618:	9f 1d       	adc	r25, r15
	updateAdultsInParkCount(getAdultCount() + occupantsAboveTen);
     61a:	b6 df       	rcall	.-148    	; 0x588 <updateChildrenInParkCount>
     61c:	b0 dd       	rcall	.-1184   	; 0x17e <getAdultCount>
     61e:	80 0f       	add	r24, r16
     620:	91 1f       	adc	r25, r17
     622:	ba df       	rcall	.-140    	; 0x598 <updateAdultsInParkCount>
	updateTotalPeopleInParkCount(getTotalCount() + occupantsAboveTen + occupantsBelowTen);
     624:	b3 dd       	rcall	.-1178   	; 0x18c <getTotalCount>
     626:	80 0f       	add	r24, r16
     628:	91 1f       	adc	r25, r17
     62a:	8e 0d       	add	r24, r14
     62c:	9f 1d       	adc	r25, r15
     62e:	bc df       	rcall	.-136    	; 0x5a8 <updateTotalPeopleInParkCount>
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
}
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	2f 96       	adiw	r28, 0x0f	; 15
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	08 95       	ret

00000658 <latch_lcd_fridge>:
     658:	84 b3       	in	r24, 0x14	; 20
     65a:	88 60       	ori	r24, 0x08	; 8


void latch_lcd_fridge()
{
	PORTG |= (1 << enable_fridge);
     65c:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65e:	89 ef       	ldi	r24, 0xF9	; 249
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <latch_lcd_fridge+0xa>
     666:	00 c0       	rjmp	.+0      	; 0x668 <latch_lcd_fridge+0x10>
     668:	00 00       	nop
	_delay_ms(1);
	PORTG &= ~(1 << enable_fridge);
     66a:	84 b3       	in	r24, 0x14	; 20
     66c:	87 7f       	andi	r24, 0xF7	; 247
     66e:	84 bb       	out	0x14, r24	; 20
     670:	89 ef       	ldi	r24, 0xF9	; 249
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <latch_lcd_fridge+0x1c>
     678:	00 c0       	rjmp	.+0      	; 0x67a <latch_lcd_fridge+0x22>
     67a:	00 00       	nop
     67c:	08 95       	ret

0000067e <latch_lcd_gate>:
	_delay_ms(1);
}

void latch_lcd_gate()
{
	PORTA |= (1 << enable_gate);
     67e:	82 b1       	in	r24, 0x02	; 2
     680:	88 60       	ori	r24, 0x08	; 8
     682:	82 b9       	out	0x02, r24	; 2
     684:	89 ef       	ldi	r24, 0xF9	; 249
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <latch_lcd_gate+0xa>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <latch_lcd_gate+0x10>
     68e:	00 00       	nop
	_delay_ms(1);
	PORTA &= ~(1 << enable_gate);
     690:	82 b1       	in	r24, 0x02	; 2
     692:	87 7f       	andi	r24, 0xF7	; 247
     694:	82 b9       	out	0x02, r24	; 2
     696:	89 ef       	ldi	r24, 0xF9	; 249
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <latch_lcd_gate+0x1c>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <latch_lcd_gate+0x22>
     6a0:	00 00       	nop
     6a2:	08 95       	ret

000006a4 <lcd_data_fridge>:
	_delay_ms(1);
}

void lcd_data_fridge(unsigned char data)
{
	PORTH = data;
     6a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTG |= (1 << rs_fridge);	// Data mode   rs= 1
     6a8:	84 b3       	in	r24, 0x14	; 20
     6aa:	82 60       	ori	r24, 0x02	; 2
     6ac:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << rw_fridge); // WRITE
     6ae:	84 b3       	in	r24, 0x14	; 20
     6b0:	8b 7f       	andi	r24, 0xFB	; 251
     6b2:	84 bb       	out	0x14, r24	; 20
	latch_lcd_fridge();
     6b4:	d1 cf       	rjmp	.-94     	; 0x658 <latch_lcd_fridge>
     6b6:	08 95       	ret

000006b8 <lcd_data_gate>:
}

void lcd_data_gate(unsigned char data)
{
	PORTF = data;
     6b8:	81 bb       	out	0x11, r24	; 17
	PORTA |= (1 << rs_gate);  // Data mode   rs= 1
     6ba:	82 b1       	in	r24, 0x02	; 2
     6bc:	82 60       	ori	r24, 0x02	; 2
     6be:	82 b9       	out	0x02, r24	; 2
	PORTA &= ~(1 << rw_gate); // WRITE
     6c0:	82 b1       	in	r24, 0x02	; 2
     6c2:	8b 7f       	andi	r24, 0xFB	; 251
     6c4:	82 b9       	out	0x02, r24	; 2
	latch_lcd_gate();
     6c6:	db cf       	rjmp	.-74     	; 0x67e <latch_lcd_gate>
     6c8:	08 95       	ret

000006ca <lcd_command_fridge>:
}

void lcd_command_fridge(unsigned char command)
{
	PORTH = command;
     6ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7e0102>
	PORTG &= ~(1 << rs_fridge); // COMMAND MODE
     6ce:	84 b3       	in	r24, 0x14	; 20
     6d0:	8d 7f       	andi	r24, 0xFD	; 253
     6d2:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << rw_fridge); // WRITE
     6d4:	84 b3       	in	r24, 0x14	; 20
     6d6:	8b 7f       	andi	r24, 0xFB	; 251
     6d8:	84 bb       	out	0x14, r24	; 20
	latch_lcd_fridge();
     6da:	be cf       	rjmp	.-132    	; 0x658 <latch_lcd_fridge>
     6dc:	08 95       	ret

000006de <lcd_command_gate>:
}

void lcd_command_gate(unsigned char command)
{
	PORTF = command;
     6de:	81 bb       	out	0x11, r24	; 17
	PORTA &= ~(1 << rs_gate); // COMMAND MODE
     6e0:	82 b1       	in	r24, 0x02	; 2
     6e2:	8d 7f       	andi	r24, 0xFD	; 253
     6e4:	82 b9       	out	0x02, r24	; 2
	PORTA &= ~(1 << rw_gate); // WRITE
     6e6:	82 b1       	in	r24, 0x02	; 2
     6e8:	8b 7f       	andi	r24, 0xFB	; 251
     6ea:	82 b9       	out	0x02, r24	; 2
	latch_lcd_gate();
     6ec:	c8 cf       	rjmp	.-112    	; 0x67e <latch_lcd_gate>
     6ee:	08 95       	ret

000006f0 <lcd_init_fridge>:
}

void lcd_init_fridge()
{
	lcd_command_fridge(0x0f);
     6f0:	8f e0       	ldi	r24, 0x0F	; 15
     6f2:	eb df       	rcall	.-42     	; 0x6ca <lcd_command_fridge>
	lcd_command_fridge(0x3f);
     6f4:	8f e3       	ldi	r24, 0x3F	; 63
     6f6:	e9 df       	rcall	.-46     	; 0x6ca <lcd_command_fridge>
	lcd_command_fridge(0x01);
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	e7 cf       	rjmp	.-50     	; 0x6ca <lcd_command_fridge>
     6fc:	08 95       	ret

000006fe <lcd_init_gate>:
     6fe:	8f e0       	ldi	r24, 0x0F	; 15
}

void lcd_init_gate()
{
	lcd_command_gate(0x0f);
     700:	ee df       	rcall	.-36     	; 0x6de <lcd_command_gate>
	lcd_command_gate(0x3f);
     702:	8f e3       	ldi	r24, 0x3F	; 63
     704:	ec df       	rcall	.-40     	; 0x6de <lcd_command_gate>
	lcd_command_gate(0x01);
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	ea cf       	rjmp	.-44     	; 0x6de <lcd_command_gate>
     70a:	08 95       	ret

0000070c <lcd_print_fridge>:
     70c:	ef 92       	push	r14
}

void lcd_print_fridge(char *content)
{
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	7c 01       	movw	r14, r24
	int len = strlen(content);
     71a:	fc 01       	movw	r30, r24
     71c:	01 90       	ld	r0, Z+
     71e:	00 20       	and	r0, r0
     720:	e9 f7       	brne	.-6      	; 0x71c <lcd_print_fridge+0x10>
     722:	31 97       	sbiw	r30, 0x01	; 1
     724:	8f 01       	movw	r16, r30
     726:	08 1b       	sub	r16, r24
     728:	19 0b       	sbc	r17, r25
	for (int i = 0; i < len; i++)
     72a:	c0 e0       	ldi	r28, 0x00	; 0
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	06 c0       	rjmp	.+12     	; 0x73c <lcd_print_fridge+0x30>
	{
		lcd_data_fridge(content[i]);
     730:	f7 01       	movw	r30, r14
     732:	ec 0f       	add	r30, r28
     734:	fd 1f       	adc	r31, r29
     736:	80 81       	ld	r24, Z
     738:	b5 df       	rcall	.-150    	; 0x6a4 <lcd_data_fridge>
}

void lcd_print_fridge(char *content)
{
	int len = strlen(content);
	for (int i = 0; i < len; i++)
     73a:	21 96       	adiw	r28, 0x01	; 1
     73c:	c0 17       	cp	r28, r16
     73e:	d1 07       	cpc	r29, r17
     740:	bc f3       	brlt	.-18     	; 0x730 <lcd_print_fridge+0x24>
	{
		lcd_data_fridge(content[i]);
	}
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	08 95       	ret

00000750 <lcd_print_gate_clear>:

void lcd_print_gate_clear(char *content)
{
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	7c 01       	movw	r14, r24
	int len = strlen(content);
     75e:	fc 01       	movw	r30, r24
     760:	01 90       	ld	r0, Z+
     762:	00 20       	and	r0, r0
     764:	e9 f7       	brne	.-6      	; 0x760 <lcd_print_gate_clear+0x10>
     766:	31 97       	sbiw	r30, 0x01	; 1
     768:	8f 01       	movw	r16, r30
     76a:	08 1b       	sub	r16, r24
     76c:	19 0b       	sbc	r17, r25
	for (int i = 0; i < len; i++)
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	06 c0       	rjmp	.+12     	; 0x780 <lcd_print_gate_clear+0x30>
	{
		lcd_data_gate(content[i]);
     774:	f7 01       	movw	r30, r14
     776:	ec 0f       	add	r30, r28
     778:	fd 1f       	adc	r31, r29
     77a:	80 81       	ld	r24, Z
     77c:	9d df       	rcall	.-198    	; 0x6b8 <lcd_data_gate>
}

void lcd_print_gate_clear(char *content)
{
	int len = strlen(content);
	for (int i = 0; i < len; i++)
     77e:	21 96       	adiw	r28, 0x01	; 1
     780:	c0 17       	cp	r28, r16
     782:	d1 07       	cpc	r29, r17
     784:	bc f3       	brlt	.-18     	; 0x774 <lcd_print_gate_clear+0x24>
	{
		lcd_data_gate(content[i]);
	}
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	08 95       	ret

00000794 <lcd_print_gate>:

void lcd_print_gate(char *content)
{
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	7c 01       	movw	r14, r24
	lcd_command_gate(0x01);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	9c df       	rcall	.-200    	; 0x6de <lcd_command_gate>
	int len = strlen(content);
     7a6:	f7 01       	movw	r30, r14
     7a8:	01 90       	ld	r0, Z+
     7aa:	00 20       	and	r0, r0
     7ac:	e9 f7       	brne	.-6      	; 0x7a8 <lcd_print_gate+0x14>
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	8f 01       	movw	r16, r30
     7b2:	0e 19       	sub	r16, r14
     7b4:	1f 09       	sbc	r17, r15
	for (int i = 0; i < len; i++)
     7b6:	c0 e0       	ldi	r28, 0x00	; 0
     7b8:	d0 e0       	ldi	r29, 0x00	; 0
     7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <lcd_print_gate+0x34>
	{
		lcd_data_gate(content[i]);
     7bc:	f7 01       	movw	r30, r14
     7be:	ec 0f       	add	r30, r28
     7c0:	fd 1f       	adc	r31, r29
     7c2:	80 81       	ld	r24, Z
     7c4:	79 df       	rcall	.-270    	; 0x6b8 <lcd_data_gate>

void lcd_print_gate(char *content)
{
	lcd_command_gate(0x01);
	int len = strlen(content);
	for (int i = 0; i < len; i++)
     7c6:	21 96       	adiw	r28, 0x01	; 1
     7c8:	c0 17       	cp	r28, r16
     7ca:	d1 07       	cpc	r29, r17
     7cc:	bc f3       	brlt	.-18     	; 0x7bc <lcd_print_gate+0x28>
	{
		lcd_data_gate(content[i]);
	}
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	08 95       	ret

000007dc <carLeavingPark>:
		USART_Transmit("Invalid choice. Please try again.\n");
	}
}

void carLeavingPark()
{
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	a4 97       	sbiw	r28, 0x24	; 36
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
	char carInfo[CAR_INFO_SIZE];
	char *token;
	char *carInfoParts[3];
	int pos = 0;

	USART_Transmit("Exiting car number plate: ");
     7fc:	8e ed       	ldi	r24, 0xDE	; 222
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	f1 dc       	rcall	.-1566   	; 0x1e4 <USART_Transmit>
	USART_ReceiveString(numberPlate, sizeof(numberPlate));
     802:	6f e0       	ldi	r22, 0x0F	; 15
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ce 01       	movw	r24, r28
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	53 dd       	rcall	.-1370   	; 0x2b2 <USART_ReceiveString>
	USART_Transmit("\r\n");
     80c:	8b e5       	ldi	r24, 0x5B	; 91
     80e:	94 e0       	ldi	r25, 0x04	; 4
     810:	e9 dc       	rcall	.-1582   	; 0x1e4 <USART_Transmit>

	for (uint16_t address = (EEPROM_ADDRESS_NUMBER_PLATES - (countNumberPlates * CAR_INFO_SIZE)); address <= getMaxAddress(); address += CAR_INFO_SIZE)
     812:	20 91 43 07 	lds	r18, 0x0743	; 0x800743 <countNumberPlates>
     816:	30 91 44 07 	lds	r19, 0x0744	; 0x800744 <countNumberPlates+0x1>
     81a:	41 ef       	ldi	r20, 0xF1	; 241
     81c:	42 03       	mulsu	r20, r18
     81e:	80 01       	movw	r16, r0
     820:	43 9f       	mul	r20, r19
     822:	10 0d       	add	r17, r0
     824:	11 24       	eor	r1, r1
     826:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <EEPROM_ADDRESS_NUMBER_PLATES>
     82a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <EEPROM_ADDRESS_NUMBER_PLATES+0x1>
     82e:	08 0f       	add	r16, r24
     830:	19 1f       	adc	r17, r25
     832:	21 de       	rcall	.-958    	; 0x476 <getMaxAddress>
     834:	80 17       	cp	r24, r16
     836:	91 07       	cpc	r25, r17
     838:	08 f4       	brcc	.+2      	; 0x83c <carLeavingPark+0x60>
     83a:	77 c0       	rjmp	.+238    	; 0x92a <carLeavingPark+0x14e>
	{
		eeprom_read_block(carInfo, (void *)address, CAR_INFO_SIZE);
     83c:	4f e0       	ldi	r20, 0x0F	; 15
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	b8 01       	movw	r22, r16
     842:	ce 01       	movw	r24, r28
     844:	40 96       	adiw	r24, 0x10	; 16
     846:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <eeprom_read_block>
		token = strtok(carInfo, "-");
     84a:	69 ef       	ldi	r22, 0xF9	; 249
     84c:	72 e0       	ldi	r23, 0x02	; 2
     84e:	ce 01       	movw	r24, r28
     850:	40 96       	adiw	r24, 0x10	; 16
     852:	15 d4       	rcall	.+2090   	; 0x107e <strtok>
		carInfoParts[pos] = token;
     854:	98 a3       	std	Y+32, r25	; 0x20
     856:	8f 8f       	std	Y+31, r24	; 0x1f
		pos++;
     858:	ee 24       	eor	r14, r14
     85a:	e3 94       	inc	r14
     85c:	f1 2c       	mov	r15, r1
		while (token != NULL)
		{
			token = strtok(NULL, "-");
     85e:	13 c0       	rjmp	.+38     	; 0x886 <carLeavingPark+0xaa>
     860:	69 ef       	ldi	r22, 0xF9	; 249
     862:	72 e0       	ldi	r23, 0x02	; 2
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0a d4       	rcall	.+2068   	; 0x107e <strtok>
			carInfoParts[pos] = token;
     86a:	f7 01       	movw	r30, r14
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	2c 0f       	add	r18, r28
     876:	3d 1f       	adc	r19, r29
     878:	e2 0f       	add	r30, r18
     87a:	f3 1f       	adc	r31, r19
     87c:	97 8f       	std	Z+31, r25	; 0x1f
     87e:	86 8f       	std	Z+30, r24	; 0x1e
			pos++;
     880:	3f ef       	ldi	r19, 0xFF	; 255
     882:	e3 1a       	sub	r14, r19
     884:	f3 0a       	sbc	r15, r19
	{
		eeprom_read_block(carInfo, (void *)address, CAR_INFO_SIZE);
		token = strtok(carInfo, "-");
		carInfoParts[pos] = token;
		pos++;
		while (token != NULL)
     886:	89 2b       	or	r24, r25
			token = strtok(NULL, "-");
			carInfoParts[pos] = token;
			pos++;
		}

		if (!strcmp(removeTrailingNulls(numberPlate), carInfoParts[0]))
     888:	59 f7       	brne	.-42     	; 0x860 <carLeavingPark+0x84>
     88a:	ef 8c       	ldd	r14, Y+31	; 0x1f
     88c:	f8 a0       	ldd	r15, Y+32	; 0x20
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	83 dc       	rcall	.-1786   	; 0x19a <removeTrailingNulls>
     894:	b7 01       	movw	r22, r14
     896:	f6 d3       	rcall	.+2028   	; 0x1084 <strcmp>
     898:	89 2b       	or	r24, r25
     89a:	09 f0       	breq	.+2      	; 0x89e <carLeavingPark+0xc2>
     89c:	3a c0       	rjmp	.+116    	; 0x912 <carLeavingPark+0x136>
		{
			countNumberPlates--;
     89e:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <countNumberPlates>
     8a2:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <countNumberPlates+0x1>
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <countNumberPlates+0x1>
			clearEEPROMMemoryRange(address, address + CAR_INFO_SIZE); // delete that car from memory
     8ac:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <countNumberPlates>
     8b0:	b8 01       	movw	r22, r16
     8b2:	61 5f       	subi	r22, 0xF1	; 241
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
			updateChildrenInParkCount(getChildCount() - atoi(carInfoParts[1]));
     8b6:	c8 01       	movw	r24, r16
     8b8:	47 de       	rcall	.-882    	; 0x548 <clearEEPROMMemoryRange>
     8ba:	5a dc       	rcall	.-1868   	; 0x170 <getChildCount>
     8bc:	8c 01       	movw	r16, r24
     8be:	e9 a0       	ldd	r14, Y+33	; 0x21
     8c0:	fa a0       	ldd	r15, Y+34	; 0x22
     8c2:	c7 01       	movw	r24, r14
     8c4:	bf d3       	rcall	.+1918   	; 0x1044 <atoi>
     8c6:	98 01       	movw	r18, r16
     8c8:	28 1b       	sub	r18, r24
     8ca:	39 0b       	sbc	r19, r25
			updateAdultsInParkCount(getAdultCount() - atoi(carInfoParts[2]));
     8cc:	c9 01       	movw	r24, r18
     8ce:	5c de       	rcall	.-840    	; 0x588 <updateChildrenInParkCount>
     8d0:	56 dc       	rcall	.-1876   	; 0x17e <getAdultCount>
     8d2:	6c 01       	movw	r12, r24
     8d4:	0b a1       	ldd	r16, Y+35	; 0x23
     8d6:	1c a1       	ldd	r17, Y+36	; 0x24
     8d8:	c8 01       	movw	r24, r16
     8da:	b4 d3       	rcall	.+1896   	; 0x1044 <atoi>
     8dc:	96 01       	movw	r18, r12
     8de:	28 1b       	sub	r18, r24
			updateTotalPeopleInParkCount(atoi(carInfoParts[1]) + atoi(carInfoParts[2]));
     8e0:	39 0b       	sbc	r19, r25
     8e2:	c9 01       	movw	r24, r18
     8e4:	59 de       	rcall	.-846    	; 0x598 <updateAdultsInParkCount>
     8e6:	c7 01       	movw	r24, r14
     8e8:	ad d3       	rcall	.+1882   	; 0x1044 <atoi>
     8ea:	7c 01       	movw	r14, r24
     8ec:	c8 01       	movw	r24, r16
     8ee:	aa d3       	rcall	.+1876   	; 0x1044 <atoi>
     8f0:	8e 0d       	add	r24, r14
			lcd_print_gate("Car exiting the park.");
     8f2:	9f 1d       	adc	r25, r15
     8f4:	59 de       	rcall	.-846    	; 0x5a8 <updateTotalPeopleInParkCount>
     8f6:	8b ef       	ldi	r24, 0xFB	; 251
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	4c df       	rcall	.-360    	; 0x794 <lcd_print_gate>
     8fc:	3f e7       	ldi	r19, 0x7F	; 127
     8fe:	8a e1       	ldi	r24, 0x1A	; 26
     900:	96 e0       	ldi	r25, 0x06	; 6
     902:	31 50       	subi	r19, 0x01	; 1
     904:	80 40       	sbci	r24, 0x00	; 0
			_delay_ms(2000);
			lcd_print_gate();
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <carLeavingPark+0x126>
			return;
     90a:	00 c0       	rjmp	.+0      	; 0x90c <carLeavingPark+0x130>
		}
		else
		{
			USART_Transmit("The entry of car with number plate: ");
     90c:	00 00       	nop
     90e:	42 df       	rcall	.-380    	; 0x794 <lcd_print_gate>
     910:	0c c0       	rjmp	.+24     	; 0x92a <carLeavingPark+0x14e>
     912:	81 e1       	ldi	r24, 0x11	; 17
			USART_Transmit(numberPlate);
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	66 dc       	rcall	.-1844   	; 0x1e4 <USART_Transmit>
     918:	ce 01       	movw	r24, r28
     91a:	01 96       	adiw	r24, 0x01	; 1
			USART_Transmit(" was not recorded.");
     91c:	63 dc       	rcall	.-1850   	; 0x1e4 <USART_Transmit>
     91e:	86 e3       	ldi	r24, 0x36	; 54
     920:	93 e0       	ldi	r25, 0x03	; 3
     922:	60 dc       	rcall	.-1856   	; 0x1e4 <USART_Transmit>

			USART_Transmit("\r\n");
     924:	8b e5       	ldi	r24, 0x5B	; 91
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	5d dc       	rcall	.-1862   	; 0x1e4 <USART_Transmit>
     92a:	a4 96       	adiw	r28, 0x24	; 36
			return;
		}
	}
}
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	08 95       	ret

00000948 <bottle_keypad>:
     948:	8b ef       	ldi	r24, 0xFB	; 251
	MoneySlot();
}

int bottle_keypad()
{
	PORTL = 0b11111011;
     94a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	if ((PINL & 0x8) == 0)
     94e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     952:	83 fd       	sbrc	r24, 3
     954:	07 c0       	rjmp	.+14     	; 0x964 <bottle_keypad+0x1c>
	{
		bottleNumber = 1;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     95e:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
     962:	15 c0       	rjmp	.+42     	; 0x98e <bottle_keypad+0x46>
	}
	else if ((PINL & 0x10) == 0)
     964:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     968:	84 fd       	sbrc	r24, 4
     96a:	07 c0       	rjmp	.+14     	; 0x97a <bottle_keypad+0x32>
	{
		bottleNumber = 4;
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     974:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
     978:	0a c0       	rjmp	.+20     	; 0x98e <bottle_keypad+0x46>
	}
	else if ((PINL & 0x20) == 0)
     97a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     97e:	85 fd       	sbrc	r24, 5
     980:	06 c0       	rjmp	.+12     	; 0x98e <bottle_keypad+0x46>
	{
		bottleNumber = 7;
     982:	87 e0       	ldi	r24, 0x07	; 7
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     98a:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
	}

	PORTL = 0b11111101; // second column
     98e:	8d ef       	ldi	r24, 0xFD	; 253
     990:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	if ((PINL & 0x8) == 0)
     994:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     998:	83 fd       	sbrc	r24, 3
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <bottle_keypad+0x62>
	{
		bottleNumber = 2;
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     9a4:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
     9a8:	1e c0       	rjmp	.+60     	; 0x9e6 <bottle_keypad+0x9e>
	}
	else if ((PINL & 0x10) == 0)
     9aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     9ae:	84 fd       	sbrc	r24, 4
     9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <bottle_keypad+0x78>
	{
		bottleNumber = 5;
     9b2:	85 e0       	ldi	r24, 0x05	; 5
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     9ba:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
     9be:	13 c0       	rjmp	.+38     	; 0x9e6 <bottle_keypad+0x9e>
	}
	else if ((PINL & 0x20) == 0)
     9c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     9c4:	85 fd       	sbrc	r24, 5
     9c6:	07 c0       	rjmp	.+14     	; 0x9d6 <bottle_keypad+0x8e>
	{
		bottleNumber = 8;
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     9d0:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
     9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <bottle_keypad+0x9e>
	}
	else if ((PINL & 0x40) == 0)
     9d6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     9da:	86 fd       	sbrc	r24, 6
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <bottle_keypad+0x9e>
	{
		bottleNumber = 0;
     9de:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <bottleNumber+0x1>
     9e2:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <bottleNumber>
	}

	PORTL = 0b11111110;
     9e6:	8e ef       	ldi	r24, 0xFE	; 254
     9e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7e010b>
	if ((PINL & 0x8) == 0)
     9ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     9f0:	83 fd       	sbrc	r24, 3
     9f2:	07 c0       	rjmp	.+14     	; 0xa02 <bottle_keypad+0xba>
	{
		bottleNumber = 3;
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     9fc:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
     a00:	15 c0       	rjmp	.+42     	; 0xa2c <bottle_keypad+0xe4>
	}
	else if ((PINL & 0x10) == 0)
     a02:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     a06:	84 fd       	sbrc	r24, 4
     a08:	07 c0       	rjmp	.+14     	; 0xa18 <bottle_keypad+0xd0>
	{
		bottleNumber = 6;
     a0a:	86 e0       	ldi	r24, 0x06	; 6
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     a12:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
     a16:	0a c0       	rjmp	.+20     	; 0xa2c <bottle_keypad+0xe4>
	}
	else if ((PINL & 0x20) == 0)
     a18:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7e0109>
     a1c:	85 fd       	sbrc	r24, 5
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <bottle_keypad+0xe4>
	{
		bottleNumber = 9;
     a20:	89 e0       	ldi	r24, 0x09	; 9
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <bottleNumber+0x1>
     a28:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <bottleNumber>
	}
	return bottleNumber;
}
     a2c:	80 91 57 07 	lds	r24, 0x0757	; 0x800757 <bottleNumber>
     a30:	90 91 58 07 	lds	r25, 0x0758	; 0x800758 <bottleNumber+0x1>
     a34:	08 95       	ret

00000a36 <MoneySlot>:
		lcd_data_gate(content[i]);
	}
}

void MoneySlot()
{
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	28 97       	sbiw	r28, 0x08	; 8
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
	lcd_command_fridge(0x01); 
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	38 de       	rcall	.-912    	; 0x6ca <lcd_command_fridge>
	lcd_command_fridge(0x80);
     a5a:	80 e8       	ldi	r24, 0x80	; 128
     a5c:	36 de       	rcall	.-916    	; 0x6ca <lcd_command_fridge>
	lcd_print_fridge("Bottle costs");
     a5e:	89 e4       	ldi	r24, 0x49	; 73
     a60:	93 e0       	ldi	r25, 0x03	; 3
	lcd_command_fridge(0xC9);
     a62:	54 de       	rcall	.-856    	; 0x70c <lcd_print_fridge>
     a64:	89 ec       	ldi	r24, 0xC9	; 201
	lcd_print_fridge("UGX1500");
     a66:	31 de       	rcall	.-926    	; 0x6ca <lcd_command_fridge>
     a68:	86 e5       	ldi	r24, 0x56	; 86
     a6a:	93 e0       	ldi	r25, 0x03	; 3
	lcd_command_fridge(0x90);
     a6c:	4f de       	rcall	.-866    	; 0x70c <lcd_print_fridge>
     a6e:	80 e9       	ldi	r24, 0x90	; 144
     a70:	2c de       	rcall	.-936    	; 0x6ca <lcd_command_fridge>
	lcd_print_fridge("Bottles: ");
     a72:	8e e5       	ldi	r24, 0x5E	; 94
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	4a de       	rcall	.-876    	; 0x70c <lcd_print_fridge>
	int bottleNumber = 0;
     a78:	00 e0       	ldi	r16, 0x00	; 0
     a7a:	10 e0       	ldi	r17, 0x00	; 0
	while (bottleNumber == 0)
	{
		bottleNumber = bottle_keypad();
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <MoneySlot+0x4c>
     a7e:	64 df       	rcall	.-312    	; 0x948 <bottle_keypad>
	lcd_command_fridge(0xC9);
	lcd_print_fridge("UGX1500");
	lcd_command_fridge(0x90);
	lcd_print_fridge("Bottles: ");
	int bottleNumber = 0;
	while (bottleNumber == 0)
     a80:	8c 01       	movw	r16, r24
     a82:	01 15       	cp	r16, r1
     a84:	11 05       	cpc	r17, r1
	{
		bottleNumber = bottle_keypad();
	}
	lcd_command_fridge(0x99);
     a86:	d9 f3       	breq	.-10     	; 0xa7e <MoneySlot+0x48>
     a88:	89 e9       	ldi	r24, 0x99	; 153
     a8a:	1f de       	rcall	.-962    	; 0x6ca <lcd_command_fridge>
	lcd_data_fridge((char)(bottleNumber + '0'));
     a8c:	80 e3       	ldi	r24, 0x30	; 48
     a8e:	80 0f       	add	r24, r16
     a90:	09 de       	rcall	.-1006   	; 0x6a4 <lcd_data_fridge>
     a92:	2f e9       	ldi	r18, 0x9F	; 159
     a94:	46 e8       	ldi	r20, 0x86	; 134
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	21 50       	subi	r18, 0x01	; 1
     a9a:	40 40       	sbci	r20, 0x00	; 0
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <MoneySlot+0x62>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <MoneySlot+0x6c>
     aa2:	00 00       	nop
     aa4:	8c ed       	ldi	r24, 0xDC	; 220
	_delay_ms(500);

	int cash = bottleNumber * 1500;
     aa6:	95 e0       	ldi	r25, 0x05	; 5
     aa8:	08 9f       	mul	r16, r24
     aaa:	70 01       	movw	r14, r0
     aac:	09 9f       	mul	r16, r25
     aae:	f0 0c       	add	r15, r0
     ab0:	18 9f       	mul	r17, r24
     ab2:	f0 0c       	add	r15, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	ff 92       	push	r15
	char bottleCash[8];
	sprintf(bottleCash, "%d", cash);
     ab8:	ef 92       	push	r14
     aba:	8b ed       	ldi	r24, 0xDB	; 219
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	6c 01       	movw	r12, r24
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
	
	lcd_command_fridge(0x01);
     acc:	13 d3       	rcall	.+1574   	; 0x10f4 <sprintf>
     ace:	81 e0       	ldi	r24, 0x01	; 1
	lcd_command_fridge(0x80);
     ad0:	fc dd       	rcall	.-1032   	; 0x6ca <lcd_command_fridge>
     ad2:	80 e8       	ldi	r24, 0x80	; 128
     ad4:	fa dd       	rcall	.-1036   	; 0x6ca <lcd_command_fridge>
     ad6:	83 ed       	ldi	r24, 0xD3	; 211
     ad8:	90 e3       	ldi	r25, 0x30	; 48
     ada:	01 97       	sbiw	r24, 0x01	; 1
	_delay_ms(50);
	lcd_print_fridge("Total Cost:");
     adc:	f1 f7       	brne	.-4      	; 0xada <MoneySlot+0xa4>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <MoneySlot+0xaa>
     ae0:	00 00       	nop
     ae2:	88 e6       	ldi	r24, 0x68	; 104
	lcd_command_fridge(0xC5);
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	12 de       	rcall	.-988    	; 0x70c <lcd_print_fridge>
	lcd_print_fridge(bottleCash);
     ae8:	85 ec       	ldi	r24, 0xC5	; 197
     aea:	ef dd       	rcall	.-1058   	; 0x6ca <lcd_command_fridge>
	lcd_command_fridge(0xCA);
     aec:	c6 01       	movw	r24, r12
     aee:	0e de       	rcall	.-996    	; 0x70c <lcd_print_fridge>
	lcd_print_fridge("UGX.");
     af0:	8a ec       	ldi	r24, 0xCA	; 202
     af2:	eb dd       	rcall	.-1066   	; 0x6ca <lcd_command_fridge>
     af4:	84 e7       	ldi	r24, 0x74	; 116
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	09 de       	rcall	.-1006   	; 0x70c <lcd_print_fridge>
     afa:	83 ed       	ldi	r24, 0xD3	; 211
     afc:	90 e3       	ldi	r25, 0x30	; 48
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <MoneySlot+0xc8>
	_delay_ms(50);

	lcd_command_fridge(0x90);
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <MoneySlot+0xce>
     b04:	00 00       	nop
	lcd_print_fridge("Press 9:Accept");
     b06:	80 e9       	ldi	r24, 0x90	; 144
     b08:	e0 dd       	rcall	.-1088   	; 0x6ca <lcd_command_fridge>
     b0a:	89 e7       	ldi	r24, 0x79	; 121
	lcd_command_fridge(0xD0);
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	fe dd       	rcall	.-1028   	; 0x70c <lcd_print_fridge>
     b10:	80 ed       	ldi	r24, 0xD0	; 208
	lcd_print_fridge("Press 0: Quit");
     b12:	db dd       	rcall	.-1098   	; 0x6ca <lcd_command_fridge>
     b14:	88 e8       	ldi	r24, 0x88	; 136
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	f9 dd       	rcall	.-1038   	; 0x70c <lcd_print_fridge>

	int choice = 0;
	while (choice == 0)
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	7c c0       	rjmp	.+248    	; 0xc20 <MoneySlot+0x1ea>
	{
		choice = bottle_keypad();

		if (choice == 9)
		{
			lcd_command_fridge(0x01);
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	cf dd       	rcall	.-1122   	; 0x6ca <lcd_command_fridge>
     b2c:	80 e8       	ldi	r24, 0x80	; 128
			lcd_command_fridge(0x80);
     b2e:	cd dd       	rcall	.-1126   	; 0x6ca <lcd_command_fridge>
     b30:	86 e9       	ldi	r24, 0x96	; 150
     b32:	93 e0       	ldi	r25, 0x03	; 3
			lcd_print_fridge("Accepted.");
     b34:	eb dd       	rcall	.-1066   	; 0x70c <lcd_print_fridge>
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	1c c0       	rjmp	.+56     	; 0xb74 <MoneySlot+0x13e>
			for (int i = 0; i < 3; i++) // motor - open money slot
     b3c:	e8 e0       	ldi	r30, 0x08	; 8
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	80 81       	ld	r24, Z
			{
				PORTK |= (1 << 0);
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 83       	st	Z, r24
     b46:	9f e3       	ldi	r25, 0x3F	; 63
     b48:	4d e0       	ldi	r20, 0x0D	; 13
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	91 50       	subi	r25, 0x01	; 1
     b4e:	40 40       	sbci	r20, 0x00	; 0
     b50:	80 40       	sbci	r24, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <MoneySlot+0x116>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <MoneySlot+0x120>
     b56:	00 00       	nop
     b58:	80 81       	ld	r24, Z
     b5a:	8e 7f       	andi	r24, 0xFE	; 254
     b5c:	80 83       	st	Z, r24
				_delay_ms(1000);
				PORTK &= ~(1 << 0);
     b5e:	9f e3       	ldi	r25, 0x3F	; 63
     b60:	4d e0       	ldi	r20, 0x0D	; 13
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	91 50       	subi	r25, 0x01	; 1
     b66:	40 40       	sbci	r20, 0x00	; 0
     b68:	80 40       	sbci	r24, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <MoneySlot+0x12e>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <MoneySlot+0x138>
     b6e:	00 00       	nop
     b70:	2f 5f       	subi	r18, 0xFF	; 255
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	23 30       	cpi	r18, 0x03	; 3
		if (choice == 9)
		{
			lcd_command_fridge(0x01);
			lcd_command_fridge(0x80);
			lcd_print_fridge("Accepted.");
			for (int i = 0; i < 3; i++) // motor - open money slot
     b76:	31 05       	cpc	r19, r1
     b78:	0c f3       	brlt	.-62     	; 0xb3c <MoneySlot+0x106>
     b7a:	9f e7       	ldi	r25, 0x7F	; 127
     b7c:	2a e1       	ldi	r18, 0x1A	; 26
     b7e:	46 e0       	ldi	r20, 0x06	; 6
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	20 40       	sbci	r18, 0x00	; 0
     b84:	40 40       	sbci	r20, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <MoneySlot+0x14a>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <MoneySlot+0x154>
     b8a:	00 00       	nop
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	1c c0       	rjmp	.+56     	; 0xbca <MoneySlot+0x194>
			}

			_delay_ms(2000);

			// dispense bottle
			for (int b = 0; b < bottleNumber; b++)
     b92:	e8 e0       	ldi	r30, 0x08	; 8
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	80 81       	ld	r24, Z
			{
				PORTK |= (1 << 1);
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	80 83       	st	Z, r24
     b9c:	8f e7       	ldi	r24, 0x7F	; 127
     b9e:	9a e1       	ldi	r25, 0x1A	; 26
     ba0:	46 e0       	ldi	r20, 0x06	; 6
     ba2:	81 50       	subi	r24, 0x01	; 1
     ba4:	90 40       	sbci	r25, 0x00	; 0
     ba6:	40 40       	sbci	r20, 0x00	; 0
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <MoneySlot+0x16c>
     baa:	00 c0       	rjmp	.+0      	; 0xbac <MoneySlot+0x176>
     bac:	00 00       	nop
     bae:	80 81       	ld	r24, Z
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
     bb2:	80 83       	st	Z, r24
				_delay_ms(2000);
				PORTK &= ~(1 << 1);
     bb4:	8f e7       	ldi	r24, 0x7F	; 127
     bb6:	9a e1       	ldi	r25, 0x1A	; 26
     bb8:	46 e0       	ldi	r20, 0x06	; 6
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	40 40       	sbci	r20, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <MoneySlot+0x184>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <MoneySlot+0x18e>
     bc4:	00 00       	nop
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	20 17       	cp	r18, r16
			}

			_delay_ms(2000);

			// dispense bottle
			for (int b = 0; b < bottleNumber; b++)
     bcc:	31 07       	cpc	r19, r17
     bce:	0c f3       	brlt	.-62     	; 0xb92 <MoneySlot+0x15c>
     bd0:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <waterMoney>
				_delay_ms(2000);
				PORTK &= ~(1 << 1);
				_delay_ms(2000);
			}

			waterMoney += cash;
     bd4:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <waterMoney+0x1>
     bd8:	e8 0e       	add	r14, r24
     bda:	f9 1e       	adc	r15, r25
     bdc:	f0 92 48 07 	sts	0x0748, r15	; 0x800748 <waterMoney+0x1>
     be0:	e0 92 47 07 	sts	0x0747, r14	; 0x800747 <waterMoney>
			waterBottles -= bottleNumber;
     be4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <waterBottles>
     be8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <waterBottles+0x1>
     bec:	80 1b       	sub	r24, r16
     bee:	91 0b       	sbc	r25, r17
     bf0:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <waterBottles+0x1>
     bf4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <waterBottles>
			return waterMoney;
		}
		else if (choice == 0)
     bf8:	18 c0       	rjmp	.+48     	; 0xc2a <MoneySlot+0x1f4>
     bfa:	89 2b       	or	r24, r25
		{
			lcd_command_fridge(0x01);
     bfc:	89 f4       	brne	.+34     	; 0xc20 <MoneySlot+0x1ea>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	64 dd       	rcall	.-1336   	; 0x6ca <lcd_command_fridge>
			lcd_command_fridge(0x80);
     c02:	80 e8       	ldi	r24, 0x80	; 128
     c04:	62 dd       	rcall	.-1340   	; 0x6ca <lcd_command_fridge>
     c06:	80 ea       	ldi	r24, 0xA0	; 160
			lcd_print_fridge("Bye Bye. Thanks.");
     c08:	93 e0       	ldi	r25, 0x03	; 3
     c0a:	80 dd       	rcall	.-1280   	; 0x70c <lcd_print_fridge>
     c0c:	8f e7       	ldi	r24, 0x7F	; 127
     c0e:	9a e1       	ldi	r25, 0x1A	; 26
     c10:	26 e0       	ldi	r18, 0x06	; 6
     c12:	81 50       	subi	r24, 0x01	; 1
     c14:	90 40       	sbci	r25, 0x00	; 0
     c16:	20 40       	sbci	r18, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <MoneySlot+0x1dc>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <MoneySlot+0x1e6>
     c1c:	00 00       	nop
     c1e:	05 c0       	rjmp	.+10     	; 0xc2a <MoneySlot+0x1f4>
     c20:	93 de       	rcall	.-730    	; 0x948 <bottle_keypad>
     c22:	89 30       	cpi	r24, 0x09	; 9
	lcd_print_fridge("Press 0: Quit");

	int choice = 0;
	while (choice == 0)
	{
		choice = bottle_keypad();
     c24:	91 05       	cpc	r25, r1
     c26:	49 f7       	brne	.-46     	; 0xbfa <MoneySlot+0x1c4>

		if (choice == 9)
     c28:	7f cf       	rjmp	.-258    	; 0xb28 <MoneySlot+0xf2>
     c2a:	28 96       	adiw	r28, 0x08	; 8
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
		}

		 
	}
	MoneySlot();
}
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	08 95       	ret

00000c48 <displayMoneyCollected>:
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
		count++;
	}
}

void displayMoneyCollected()
{
     c4e:	df 93       	push	r29
	eeprom_write_block((void*)&waterMoney, (void*)WATER_MONEY_ADDRESS, sizeof(waterMoney));
     c50:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <WATER_MONEY_ADDRESS>
     c54:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <WATER_MONEY_ADDRESS+0x1>
     c58:	42 e0       	ldi	r20, 0x02	; 2
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	87 e4       	ldi	r24, 0x47	; 71
     c5e:	97 e0       	ldi	r25, 0x07	; 7
     c60:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <eeprom_write_block>
	waterMoney = MoneySlot();
     c64:	e8 de       	rcall	.-560    	; 0xa36 <MoneySlot>
     c66:	8c 01       	movw	r16, r24
     c68:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <waterMoney+0x1>
     c6c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <waterMoney>
	int totalCollected = 0;
	totalCollected = (getChildCount() * PRICE_BELOW_10) + ((getAdultCount() - 1) * PRICE_ABOVE_10);
     c70:	7f da       	rcall	.-2818   	; 0x170 <getChildCount>
     c72:	28 e8       	ldi	r18, 0x88	; 136
     c74:	33 e1       	ldi	r19, 0x13	; 19
     c76:	82 9f       	mul	r24, r18
     c78:	e0 01       	movw	r28, r0
     c7a:	83 9f       	mul	r24, r19
     c7c:	d0 0d       	add	r29, r0
     c7e:	92 9f       	mul	r25, r18
     c80:	d0 0d       	add	r29, r0
     c82:	11 24       	eor	r1, r1
     c84:	7c da       	rcall	.-2824   	; 0x17e <getAdultCount>
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	40 e1       	ldi	r20, 0x10	; 16
     c8a:	57 e2       	ldi	r21, 0x27	; 39
     c8c:	84 9f       	mul	r24, r20
     c8e:	90 01       	movw	r18, r0
     c90:	85 9f       	mul	r24, r21
     c92:	30 0d       	add	r19, r0
     c94:	94 9f       	mul	r25, r20
     c96:	30 0d       	add	r19, r0
     c98:	11 24       	eor	r1, r1
     c9a:	c2 0f       	add	r28, r18
     c9c:	d3 1f       	adc	r29, r19
     c9e:	c0 0f       	add	r28, r16
	int collectedMoney = waterMoney + totalCollected;
     ca0:	d1 1f       	adc	r29, r17
	USART_Transmit("Total amount collected: ");
     ca2:	81 eb       	ldi	r24, 0xB1	; 177
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	9e da       	rcall	.-2756   	; 0x1e4 <USART_Transmit>
	USART_TransmitInt(collectedMoney);
     ca8:	ce 01       	movw	r24, r28
     caa:	bf da       	rcall	.-2690   	; 0x22a <USART_TransmitInt>
	USART_Transmit("\r\n");
     cac:	8b e5       	ldi	r24, 0x5B	; 91
     cae:	94 e0       	ldi	r25, 0x04	; 4
     cb0:	99 da       	rcall	.-2766   	; 0x1e4 <USART_Transmit>
     cb2:	df 91       	pop	r29
}
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <handleMenuChoice>:
     cbc:	c1 97       	sbiw	r24, 0x31	; 49
	USART_Transmit("\r\n");
}

void handleMenuChoice(int choice)
{
	switch (choice)
     cbe:	81 32       	cpi	r24, 0x21	; 33
     cc0:	91 05       	cpc	r25, r1
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <handleMenuChoice+0xa>
     cc4:	cb c0       	rjmp	.+406    	; 0xe5c <handleMenuChoice+0x1a0>
     cc6:	8e 58       	subi	r24, 0x8E	; 142
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	fc 01       	movw	r30, r24
     ccc:	b2 c1       	rjmp	.+868    	; 0x1032 <__tablejump2__>
	{
	case '1':
		if (isParkFull())
     cce:	85 db       	rcall	.-2294   	; 0x3da <isParkFull>
     cd0:	88 23       	and	r24, r24
     cd2:	21 f0       	breq	.+8      	; 0xcdc <handleMenuChoice+0x20>
     cd4:	81 ed       	ldi	r24, 0xD1	; 209
		{
			lcd_print_gate("park full");
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	5d cd       	rjmp	.-1350   	; 0x794 <lcd_print_gate>
     cda:	08 95       	ret
			return;
		}
		lcd_print_gate("Registration.");
     cdc:	8b ed       	ldi	r24, 0xDB	; 219
     cde:	93 e0       	ldi	r25, 0x03	; 3
     ce0:	59 dd       	rcall	.-1358   	; 0x794 <lcd_print_gate>
		USART_Transmit("Number plate: ");
     ce2:	89 ee       	ldi	r24, 0xE9	; 233
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	7e da       	rcall	.-2820   	; 0x1e4 <USART_Transmit>
		USART_ReceiveString(number_plate, sizeof(number_plate));
     ce8:	6a e0       	ldi	r22, 0x0A	; 10
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	8d e4       	ldi	r24, 0x4D	; 77
     cee:	97 e0       	ldi	r25, 0x07	; 7
     cf0:	e0 da       	rcall	.-2624   	; 0x2b2 <USART_ReceiveString>
		USART_Transmit(" You entered: ");
     cf2:	88 ef       	ldi	r24, 0xF8	; 248
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	76 da       	rcall	.-2836   	; 0x1e4 <USART_Transmit>
		USART_Transmit(number_plate);
     cf8:	8d e4       	ldi	r24, 0x4D	; 77
     cfa:	97 e0       	ldi	r25, 0x07	; 7
		USART_Transmit("\r\n");
     cfc:	73 da       	rcall	.-2842   	; 0x1e4 <USART_Transmit>
     cfe:	8b e5       	ldi	r24, 0x5B	; 91
     d00:	94 e0       	ldi	r25, 0x04	; 4
     d02:	70 da       	rcall	.-2848   	; 0x1e4 <USART_Transmit>

		USART_Transmit("Below 10yrs: ");
     d04:	87 e0       	ldi	r24, 0x07	; 7
     d06:	94 e0       	ldi	r25, 0x04	; 4
     d08:	6d da       	rcall	.-2854   	; 0x1e4 <USART_Transmit>
		childCount = USART_ReadInteger();
     d0a:	fe da       	rcall	.-2564   	; 0x308 <USART_ReadInteger>
     d0c:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <childCount+0x1>
     d10:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <childCount>
		USART_Transmit(" You entered: ");
     d14:	88 ef       	ldi	r24, 0xF8	; 248
     d16:	93 e0       	ldi	r25, 0x03	; 3
     d18:	65 da       	rcall	.-2870   	; 0x1e4 <USART_Transmit>
		USART_TransmitInt(childCount);
     d1a:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <childCount>
     d1e:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <childCount+0x1>
     d22:	83 da       	rcall	.-2810   	; 0x22a <USART_TransmitInt>
     d24:	8b e5       	ldi	r24, 0x5B	; 91
		USART_Transmit("\r\n");
     d26:	94 e0       	ldi	r25, 0x04	; 4
     d28:	5d da       	rcall	.-2886   	; 0x1e4 <USART_Transmit>
     d2a:	85 e1       	ldi	r24, 0x15	; 21

		USART_Transmit("Above 10yrs: ");
     d2c:	94 e0       	ldi	r25, 0x04	; 4
     d2e:	5a da       	rcall	.-2892   	; 0x1e4 <USART_Transmit>
     d30:	eb da       	rcall	.-2602   	; 0x308 <USART_ReadInteger>
		adultCount = USART_ReadInteger();
     d32:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <adultCount+0x1>
     d36:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <adultCount>
     d3a:	88 ef       	ldi	r24, 0xF8	; 248
		USART_Transmit(" You entered: ");
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	52 da       	rcall	.-2908   	; 0x1e4 <USART_Transmit>
     d40:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <adultCount>
		USART_TransmitInt(adultCount);
     d44:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <adultCount+0x1>
     d48:	70 da       	rcall	.-2848   	; 0x22a <USART_TransmitInt>
     d4a:	8b e5       	ldi	r24, 0x5B	; 91
		USART_Transmit("\r\n");
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	4a da       	rcall	.-2924   	; 0x1e4 <USART_Transmit>
     d50:	40 91 49 07 	lds	r20, 0x0749	; 0x800749 <adultCount>

		saveCar(number_plate, childCount, adultCount);
     d54:	50 91 4a 07 	lds	r21, 0x074A	; 0x80074a <adultCount+0x1>
     d58:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <childCount>
     d5c:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <childCount+0x1>
     d60:	8d e4       	ldi	r24, 0x4D	; 77
     d62:	97 e0       	ldi	r25, 0x07	; 7
     d64:	33 dc       	rcall	.-1946   	; 0x5cc <saveCar>
     d66:	83 e2       	ldi	r24, 0x23	; 35

		USART_Transmit("Tourists registered successfully. Data stored in EEPROM.\r\n");
     d68:	94 e0       	ldi	r25, 0x04	; 4
     d6a:	3c da       	rcall	.-2952   	; 0x1e4 <USART_Transmit>
     d6c:	8e e5       	ldi	r24, 0x5E	; 94
     d6e:	94 e0       	ldi	r25, 0x04	; 4

		lcd_print_gate("Car entering.");
     d70:	11 dd       	rcall	.-1502   	; 0x794 <lcd_print_gate>
     d72:	ff e7       	ldi	r31, 0x7F	; 127
     d74:	2a e1       	ldi	r18, 0x1A	; 26
     d76:	86 e0       	ldi	r24, 0x06	; 6
     d78:	f1 50       	subi	r31, 0x01	; 1
     d7a:	20 40       	sbci	r18, 0x00	; 0
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <handleMenuChoice+0xbc>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <handleMenuChoice+0xc6>
     d82:	00 00       	nop
     d84:	8c e6       	ldi	r24, 0x6C	; 108
		_delay_ms(2000);
		lcd_print_gate("Gate closing");
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	05 dd       	rcall	.-1526   	; 0x794 <lcd_print_gate>
     d8a:	9f eb       	ldi	r25, 0xBF	; 191
     d8c:	e7 e2       	ldi	r30, 0x27	; 39
     d8e:	f9 e0       	ldi	r31, 0x09	; 9
     d90:	91 50       	subi	r25, 0x01	; 1
     d92:	e0 40       	sbci	r30, 0x00	; 0
		_delay_ms(3000);
		lcd_print_gate("Queen Elizabeth N.P.");
     d94:	f0 40       	sbci	r31, 0x00	; 0
     d96:	e1 f7       	brne	.-8      	; 0xd90 <handleMenuChoice+0xd4>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <handleMenuChoice+0xde>

		break;
	case '2':
		USART_Transmit("Tourists in the park:\r\n");
     d9a:	00 00       	nop
     d9c:	89 e7       	ldi	r24, 0x79	; 121
     d9e:	94 e0       	ldi	r25, 0x04	; 4

		USART_Transmit("Below 10yrs: ");
     da0:	f9 cc       	rjmp	.-1550   	; 0x794 <lcd_print_gate>
     da2:	08 95       	ret
		USART_TransmitInt(getChildCount());
     da4:	8e e8       	ldi	r24, 0x8E	; 142
     da6:	94 e0       	ldi	r25, 0x04	; 4
     da8:	1d da       	rcall	.-3014   	; 0x1e4 <USART_Transmit>
		USART_Transmit("\r\n");
     daa:	87 e0       	ldi	r24, 0x07	; 7
     dac:	94 e0       	ldi	r25, 0x04	; 4
     dae:	1a da       	rcall	.-3020   	; 0x1e4 <USART_Transmit>

		USART_Transmit("Above 10yrs: ");
     db0:	df d9       	rcall	.-3138   	; 0x170 <getChildCount>
     db2:	3b da       	rcall	.-2954   	; 0x22a <USART_TransmitInt>
     db4:	8b e5       	ldi	r24, 0x5B	; 91
		USART_TransmitInt(getAdultCount());
     db6:	94 e0       	ldi	r25, 0x04	; 4
     db8:	15 da       	rcall	.-3030   	; 0x1e4 <USART_Transmit>
     dba:	85 e1       	ldi	r24, 0x15	; 21
     dbc:	94 e0       	ldi	r25, 0x04	; 4
		USART_Transmit("\r\n");
     dbe:	12 da       	rcall	.-3036   	; 0x1e4 <USART_Transmit>
     dc0:	de d9       	rcall	.-3140   	; 0x17e <getAdultCount>
     dc2:	33 da       	rcall	.-2970   	; 0x22a <USART_TransmitInt>
     dc4:	8b e5       	ldi	r24, 0x5B	; 91

		USART_Transmit("Total: ");
     dc6:	94 e0       	ldi	r25, 0x04	; 4
     dc8:	0d da       	rcall	.-3046   	; 0x1e4 <USART_Transmit>
		USART_TransmitInt(getTotalCount());
     dca:	86 ea       	ldi	r24, 0xA6	; 166
     dcc:	94 e0       	ldi	r25, 0x04	; 4
     dce:	0a da       	rcall	.-3052   	; 0x1e4 <USART_Transmit>
		USART_Transmit("\r\n");
     dd0:	dd d9       	rcall	.-3142   	; 0x18c <getTotalCount>
     dd2:	2b da       	rcall	.-2986   	; 0x22a <USART_TransmitInt>
     dd4:	8b e5       	ldi	r24, 0x5B	; 91
		break;
     dd6:	94 e0       	ldi	r25, 0x04	; 4
	case '3':
		displayCarsInsidePark(); 
     dd8:	05 ca       	rjmp	.-3062   	; 0x1e4 <USART_Transmit>
		break;
	case '4':
		displayMoneyCollected();
     dda:	08 95       	ret
     ddc:	55 cb       	rjmp	.-2390   	; 0x488 <displayCarsInsidePark>
		break;
     dde:	08 95       	ret
	case '5':
		USART_Transmit("Number of drivers inside the park: ");
     de0:	33 cf       	rjmp	.-410    	; 0xc48 <displayMoneyCollected>
     de2:	08 95       	ret
		USART_TransmitInt(countNumberPlates);
     de4:	8e ea       	ldi	r24, 0xAE	; 174
     de6:	94 e0       	ldi	r25, 0x04	; 4
     de8:	fd d9       	rcall	.-3078   	; 0x1e4 <USART_Transmit>
     dea:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <countNumberPlates>
		USART_Transmit("\r\n");
     dee:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <countNumberPlates+0x1>
     df2:	1b da       	rcall	.-3018   	; 0x22a <USART_TransmitInt>
		break;
	case '6':
		eeprom_write_block((void*)&waterBottles, (void*)WATER_BOTTLES_ADDRESS, sizeof(waterBottles));
     df4:	8b e5       	ldi	r24, 0x5B	; 91
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	f5 c9       	rjmp	.-3094   	; 0x1e4 <USART_Transmit>
     dfa:	08 95       	ret
     dfc:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <WATER_BOTTLES_ADDRESS>
     e00:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <WATER_BOTTLES_ADDRESS+0x1>
     e04:	42 e0       	ldi	r20, 0x02	; 2
		MoneySlot();
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
		USART_Transmit("Number of bottles in the fridge: ");
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	ba d7       	rcall	.+3956   	; 0x1d82 <eeprom_write_block>
     e0e:	13 de       	rcall	.-986    	; 0xa36 <MoneySlot>
     e10:	8a e1       	ldi	r24, 0x1A	; 26
		USART_TransmitInt(waterBottles);
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	e7 d9       	rcall	.-3122   	; 0x1e4 <USART_Transmit>
     e16:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <waterBottles>
     e1a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <waterBottles+0x1>
		USART_Transmit("\r\n");
     e1e:	05 da       	rcall	.-3062   	; 0x22a <USART_TransmitInt>
     e20:	8b e5       	ldi	r24, 0x5B	; 91
     e22:	94 e0       	ldi	r25, 0x04	; 4
     e24:	df c9       	rjmp	.-3138   	; 0x1e4 <USART_Transmit>
		break;
     e26:	08 95       	ret
	case '7':
		replenishFridge();
     e28:	a9 ca       	rjmp	.-2734   	; 0x37c <replenishFridge>
     e2a:	08 95       	ret
		break;
     e2c:	82 ed       	ldi	r24, 0xD2	; 210
	case '8':
		USART_Transmit("Is park full: ");
     e2e:	94 e0       	ldi	r25, 0x04	; 4
     e30:	d9 d9       	rcall	.-3150   	; 0x1e4 <USART_Transmit>
     e32:	d3 da       	rcall	.-2650   	; 0x3da <isParkFull>
     e34:	88 23       	and	r24, r24
		USART_Transmit(isParkFull() ? "yes" : "no");
     e36:	19 f0       	breq	.+6      	; 0xe3e <handleMenuChoice+0x182>
     e38:	8a ec       	ldi	r24, 0xCA	; 202
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <handleMenuChoice+0x186>
     e3e:	8e ec       	ldi	r24, 0xCE	; 206
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	d0 d9       	rcall	.-3168   	; 0x1e4 <USART_Transmit>
     e44:	8b e5       	ldi	r24, 0x5B	; 91
     e46:	94 e0       	ldi	r25, 0x04	; 4
     e48:	cd c9       	rjmp	.-3174   	; 0x1e4 <USART_Transmit>
     e4a:	08 95       	ret
		USART_Transmit("\r\n");
     e4c:	c7 cc       	rjmp	.-1650   	; 0x7dc <carLeavingPark>
     e4e:	08 95       	ret
     e50:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <loggedIn>
		break;
     e54:	81 ee       	ldi	r24, 0xE1	; 225
	case '9':
		carLeavingPark();
     e56:	94 e0       	ldi	r25, 0x04	; 4
     e58:	c5 c9       	rjmp	.-3190   	; 0x1e4 <USART_Transmit>
		break;
     e5a:	08 95       	ret
	case 'Q':
		loggedIn = false;
     e5c:	8f ee       	ldi	r24, 0xEF	; 239
     e5e:	94 e0       	ldi	r25, 0x04	; 4
		USART_Transmit("Logged out.\r\n");
     e60:	c1 c9       	rjmp	.-3198   	; 0x1e4 <USART_Transmit>
     e62:	08 95       	ret

00000e64 <displayMenu>:
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
		break;
     e68:	df 93       	push	r29
	default:
		USART_Transmit("Invalid choice. Please try again.\n");
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	a8 97       	sbiw	r28, 0x28	; 40
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
		} else {
		USART_Transmit("Fridge is already stocked with enough bottles.\r\n");
	}
}
void displayMenu()
{
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
	char attendantname[20];
	char password[20];
	char choice;

	USART_Transmit("\t Welcome to Queen Elizabeth National park.\r\n");
     e7a:	82 e1       	ldi	r24, 0x12	; 18
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	b2 d9       	rcall	.-3228   	; 0x1e4 <USART_Transmit>
	USART_Transmit("Please Login to continue.\r\n");
     e80:	80 e4       	ldi	r24, 0x40	; 64
     e82:	95 e0       	ldi	r25, 0x05	; 5
     e84:	af d9       	rcall	.-3234   	; 0x1e4 <USART_Transmit>
	bool loggedIn = false;
     e86:	10 e0       	ldi	r17, 0x00	; 0

	while (!loggedIn)
     e88:	26 c0       	rjmp	.+76     	; 0xed6 <displayMenu+0x72>
	{
		USART_Transmit("Enter your username: ");
     e8a:	8c e5       	ldi	r24, 0x5C	; 92
     e8c:	95 e0       	ldi	r25, 0x05	; 5
     e8e:	aa d9       	rcall	.-3244   	; 0x1e4 <USART_Transmit>
		USART_ReceiveString(attendantname, sizeof(attendantname));
     e90:	64 e1       	ldi	r22, 0x14	; 20
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
		USART_Transmit("\r\n"); // Print newline to move to the next line
     e98:	0c da       	rcall	.-3048   	; 0x2b2 <USART_ReceiveString>
     e9a:	8b e5       	ldi	r24, 0x5B	; 91
     e9c:	94 e0       	ldi	r25, 0x04	; 4
		USART_Transmit("Enter your password: ");
     e9e:	a2 d9       	rcall	.-3260   	; 0x1e4 <USART_Transmit>
     ea0:	82 e7       	ldi	r24, 0x72	; 114
     ea2:	95 e0       	ldi	r25, 0x05	; 5
		USART_ReceiveString(password, sizeof(password));
     ea4:	9f d9       	rcall	.-3266   	; 0x1e4 <USART_Transmit>
     ea6:	64 e1       	ldi	r22, 0x14	; 20
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	ce 01       	movw	r24, r28
     eac:	45 96       	adiw	r24, 0x15	; 21
		USART_Transmit("\r\n"); // Print newline to move to the next line
     eae:	01 da       	rcall	.-3070   	; 0x2b2 <USART_ReceiveString>
     eb0:	8b e5       	ldi	r24, 0x5B	; 91
     eb2:	94 e0       	ldi	r25, 0x04	; 4

		if (checkCredentials(attendantname, password))
     eb4:	97 d9       	rcall	.-3282   	; 0x1e4 <USART_Transmit>
     eb6:	be 01       	movw	r22, r28
     eb8:	6b 5e       	subi	r22, 0xEB	; 235
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	df d9       	rcall	.-3138   	; 0x280 <checkCredentials>
		{
			USART_Transmit("Login successful.\r\n");
     ec2:	89 2b       	or	r24, r25
     ec4:	29 f0       	breq	.+10     	; 0xed0 <displayMenu+0x6c>
     ec6:	88 e8       	ldi	r24, 0x88	; 136
			loggedIn = true; // Set loggedIn to true to exit the loop
     ec8:	95 e0       	ldi	r25, 0x05	; 5
     eca:	8c d9       	rcall	.-3304   	; 0x1e4 <USART_Transmit>
		}
		else
		{
			USART_Transmit("Invalid username or password. Please try again.\r\n");
     ecc:	11 e0       	ldi	r17, 0x01	; 1
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <displayMenu+0x72>
     ed0:	8c e9       	ldi	r24, 0x9C	; 156

	USART_Transmit("\t Welcome to Queen Elizabeth National park.\r\n");
	USART_Transmit("Please Login to continue.\r\n");
	bool loggedIn = false;

	while (!loggedIn)
     ed2:	95 e0       	ldi	r25, 0x05	; 5
     ed4:	87 d9       	rcall	.-3314   	; 0x1e4 <USART_Transmit>
		}
	}

	do
	{
		USART_Transmit("Choose an option:\r\n");
     ed6:	11 23       	and	r17, r17
     ed8:	c1 f2       	breq	.-80     	; 0xe8a <displayMenu+0x26>
     eda:	8e ec       	ldi	r24, 0xCE	; 206
		USART_Transmit("1. Register Tourists.\r\n");
     edc:	95 e0       	ldi	r25, 0x05	; 5
     ede:	82 d9       	rcall	.-3324   	; 0x1e4 <USART_Transmit>
     ee0:	82 ee       	ldi	r24, 0xE2	; 226
		USART_Transmit("2. Tourists in the park.\r\n");
     ee2:	95 e0       	ldi	r25, 0x05	; 5
     ee4:	7f d9       	rcall	.-3330   	; 0x1e4 <USART_Transmit>
     ee6:	8a ef       	ldi	r24, 0xFA	; 250
		USART_Transmit("3. Cars in the park.\r\n");
     ee8:	95 e0       	ldi	r25, 0x05	; 5
     eea:	7c d9       	rcall	.-3336   	; 0x1e4 <USART_Transmit>
     eec:	85 e1       	ldi	r24, 0x15	; 21
		USART_Transmit("4. Total money collected by the park.\r\n");
     eee:	96 e0       	ldi	r25, 0x06	; 6
     ef0:	79 d9       	rcall	.-3342   	; 0x1e4 <USART_Transmit>
     ef2:	8c e2       	ldi	r24, 0x2C	; 44
		USART_Transmit("5. Number of drivers in the park.\r\n");
     ef4:	96 e0       	ldi	r25, 0x06	; 6
     ef6:	76 d9       	rcall	.-3348   	; 0x1e4 <USART_Transmit>
     ef8:	84 e5       	ldi	r24, 0x54	; 84
		USART_Transmit("6. Number of bottles in the fridge.\r\n");
     efa:	96 e0       	ldi	r25, 0x06	; 6
     efc:	73 d9       	rcall	.-3354   	; 0x1e4 <USART_Transmit>
		USART_Transmit("7. Replenish fridge.\r\n");
     efe:	88 e7       	ldi	r24, 0x78	; 120
     f00:	96 e0       	ldi	r25, 0x06	; 6
     f02:	70 d9       	rcall	.-3360   	; 0x1e4 <USART_Transmit>
		USART_Transmit("8. Check if park is full.\r\n");
     f04:	8e e9       	ldi	r24, 0x9E	; 158
     f06:	96 e0       	ldi	r25, 0x06	; 6
     f08:	6d d9       	rcall	.-3366   	; 0x1e4 <USART_Transmit>
     f0a:	85 eb       	ldi	r24, 0xB5	; 181
		USART_Transmit("9. Car exiting park.\r\n");
     f0c:	96 e0       	ldi	r25, 0x06	; 6
     f0e:	6a d9       	rcall	.-3372   	; 0x1e4 <USART_Transmit>
     f10:	81 ed       	ldi	r24, 0xD1	; 209
     f12:	96 e0       	ldi	r25, 0x06	; 6
		USART_Transmit("Q. Logout.\r\n");
     f14:	67 d9       	rcall	.-3378   	; 0x1e4 <USART_Transmit>
     f16:	88 ee       	ldi	r24, 0xE8	; 232
     f18:	96 e0       	ldi	r25, 0x06	; 6
     f1a:	64 d9       	rcall	.-3384   	; 0x1e4 <USART_Transmit>
		USART_Transmit("Enter an option.\r\n");
     f1c:	85 ef       	ldi	r24, 0xF5	; 245
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	61 d9       	rcall	.-3390   	; 0x1e4 <USART_Transmit>
     f22:	23 da       	rcall	.-3002   	; 0x36a <getOption>
		choice = getOption();
     f24:	18 2f       	mov	r17, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	c9 de       	rcall	.-622    	; 0xcbc <handleMenuChoice>
	
		handleMenuChoice(choice);
     f2a:	11 35       	cpi	r17, 0x51	; 81
     f2c:	b1 f6       	brne	.-84     	; 0xeda <displayMenu+0x76>
     f2e:	a8 96       	adiw	r28, 0x28	; 40
	} while (choice != 'Q');
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli

}
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	08 95       	ret

00000f42 <main>:
     f42:	87 e8       	ldi	r24, 0x87	; 135
     f44:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7e010a>
}

int main(void)
{
	DDRL = 0x87;
	DDRH = 0xff; // fridge LCD
     f48:	cf ef       	ldi	r28, 0xFF	; 255
     f4a:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
	DDRG = 0xff; // fridge LCD
     f4e:	c3 bb       	out	0x13, r28	; 19
	DDRK = 0xff;
     f50:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <__TEXT_REGION_LENGTH__+0x7e0107>
	DDRF = 0xff; // gate LCD
     f54:	c0 bb       	out	0x10, r28	; 16
	DDRA = 0xff; // gate LCD
     f56:	c1 b9       	out	0x01, r28	; 1

	lcd_init_gate();
     f58:	d2 db       	rcall	.-2140   	; 0x6fe <lcd_init_gate>
	lcd_init_fridge();
     f5a:	ca db       	rcall	.-2156   	; 0x6f0 <lcd_init_fridge>
     f5c:	88 e0       	ldi	r24, 0x08	; 8
	lcd_print_gate_clear("WELCOME TO");
     f5e:	97 e0       	ldi	r25, 0x07	; 7
     f60:	f7 db       	rcall	.-2066   	; 0x750 <lcd_print_gate_clear>
	lcd_command_gate(0xC0);
     f62:	80 ec       	ldi	r24, 0xC0	; 192
     f64:	bc db       	rcall	.-2184   	; 0x6de <lcd_command_gate>
	lcd_print_gate_clear("QUEEN ELIZABETH");
     f66:	83 e1       	ldi	r24, 0x13	; 19
     f68:	97 e0       	ldi	r25, 0x07	; 7
     f6a:	f2 db       	rcall	.-2076   	; 0x750 <lcd_print_gate_clear>
	lcd_command_gate(0x90);
     f6c:	80 e9       	ldi	r24, 0x90	; 144
     f6e:	b7 db       	rcall	.-2194   	; 0x6de <lcd_command_gate>
     f70:	83 e2       	ldi	r24, 0x23	; 35
	lcd_print_gate_clear("NATIONAL PARK.");
     f72:	97 e0       	ldi	r25, 0x07	; 7
     f74:	ed db       	rcall	.-2086   	; 0x750 <lcd_print_gate_clear>
     f76:	2f e7       	ldi	r18, 0x7F	; 127
     f78:	8a e1       	ldi	r24, 0x1A	; 26
     f7a:	96 e0       	ldi	r25, 0x06	; 6
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <main+0x3a>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <main+0x44>
     f86:	00 00       	nop
	_delay_ms(2000);
	USART_Init();
     f88:	21 d9       	rcall	.-3518   	; 0x1cc <USART_Init>
     f8a:	16 db       	rcall	.-2516   	; 0x5b8 <initialiseEEPROM>
	initialiseEEPROM();
     f8c:	78 94       	sei
     f8e:	8d b3       	in	r24, 0x1d	; 29

	// setup interrupts
	sei();
     f90:	81 60       	ori	r24, 0x01	; 1
	EIMSK |= (1 << INT0);
     f92:	8d bb       	out	0x1d, r24	; 29
     f94:	e9 e6       	ldi	r30, 0x69	; 105
     f96:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (1 << ISC01);
     f98:	80 81       	ld	r24, Z
     f9a:	82 60       	ori	r24, 0x02	; 2
     f9c:	80 83       	st	Z, r24
     f9e:	1a b8       	out	0x0a, r1	; 10
     fa0:	c4 b9       	out	0x04, r28	; 4
	// set data direction registers
	DDRD = 0x00;
	DDRB = 0xFF;

	// Set pull up resistor on incoming car switch
	PORTD |= (1 << PD0);
     fa2:	8b b1       	in	r24, 0x0b	; 11
     fa4:	81 60       	ori	r24, 0x01	; 1

	if (resetEEPROM)
     fa6:	8b b9       	out	0x0b, r24	; 11
     fa8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     fac:	88 23       	and	r24, r24
	{
		resetControllerEEPROM();
     fae:	11 f0       	breq	.+4      	; 0xfb4 <main+0x72>
     fb0:	df da       	rcall	.-2626   	; 0x570 <resetControllerEEPROM>
		initialiseEEPROM();
     fb2:	02 db       	rcall	.-2556   	; 0x5b8 <initialiseEEPROM>
     fb4:	57 df       	rcall	.-338    	; 0xe64 <displayMenu>
	}

	while (1)
	{
		displayMenu();
     fb6:	fe cf       	rjmp	.-4      	; 0xfb4 <main+0x72>

00000fb8 <__vector_1>:
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
	}
}

ISR(INT0_vect)
{
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	0b b6       	in	r0, 0x3b	; 59
     fc4:	0f 92       	push	r0
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
	if (PIND & ~(1 << PD0)) {
     fde:	89 b1       	in	r24, 0x09	; 9
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	8e 7f       	andi	r24, 0xFE	; 254
     fe4:	89 2b       	or	r24, r25
     fe6:	91 f0       	breq	.+36     	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
		PORTB |= (1 << PB7);
     fe8:	85 b1       	in	r24, 0x05	; 5
     fea:	80 68       	ori	r24, 0x80	; 128
     fec:	85 b9       	out	0x05, r24	; 5
     fee:	2f e9       	ldi	r18, 0x9F	; 159
     ff0:	86 e8       	ldi	r24, 0x86	; 134
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	21 50       	subi	r18, 0x01	; 1
     ff6:	80 40       	sbci	r24, 0x00	; 0
     ff8:	90 40       	sbci	r25, 0x00	; 0
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <__vector_1+0x3c>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <__vector_1+0x46>
     ffe:	00 00       	nop
		_delay_ms(500);
		PORTB &= ~(1 << PB7);
    1000:	85 b1       	in	r24, 0x05	; 5
    1002:	8f 77       	andi	r24, 0x7F	; 127
    1004:	85 b9       	out	0x05, r24	; 5
		lcd_print_gate("Car at Gate.");
    1006:	82 e3       	ldi	r24, 0x32	; 50
    1008:	97 e0       	ldi	r25, 0x07	; 7
    100a:	c4 db       	rcall	.-2168   	; 0x794 <lcd_print_gate>
	}
		
}
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	0f 90       	pop	r0
    1026:	0b be       	out	0x3b, r0	; 59
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <__tablejump2__>:
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	00 24       	eor	r0, r0
    1038:	00 1c       	adc	r0, r0
    103a:	0b be       	out	0x3b, r0	; 59
    103c:	07 90       	elpm	r0, Z+
    103e:	f6 91       	elpm	r31, Z
    1040:	e0 2d       	mov	r30, r0
    1042:	09 94       	ijmp

00001044 <atoi>:
    1044:	fc 01       	movw	r30, r24
    1046:	88 27       	eor	r24, r24
    1048:	99 27       	eor	r25, r25
    104a:	e8 94       	clt
    104c:	21 91       	ld	r18, Z+
    104e:	20 32       	cpi	r18, 0x20	; 32
    1050:	e9 f3       	breq	.-6      	; 0x104c <atoi+0x8>
    1052:	29 30       	cpi	r18, 0x09	; 9
    1054:	10 f0       	brcs	.+4      	; 0x105a <atoi+0x16>
    1056:	2e 30       	cpi	r18, 0x0E	; 14
    1058:	c8 f3       	brcs	.-14     	; 0x104c <atoi+0x8>
    105a:	2b 32       	cpi	r18, 0x2B	; 43
    105c:	39 f0       	breq	.+14     	; 0x106c <atoi+0x28>
    105e:	2d 32       	cpi	r18, 0x2D	; 45
    1060:	31 f4       	brne	.+12     	; 0x106e <atoi+0x2a>
    1062:	68 94       	set
    1064:	03 c0       	rjmp	.+6      	; 0x106c <atoi+0x28>
    1066:	3e d0       	rcall	.+124    	; 0x10e4 <__mulhi_const_10>
    1068:	82 0f       	add	r24, r18
    106a:	91 1d       	adc	r25, r1
    106c:	21 91       	ld	r18, Z+
    106e:	20 53       	subi	r18, 0x30	; 48
    1070:	2a 30       	cpi	r18, 0x0A	; 10
    1072:	c8 f3       	brcs	.-14     	; 0x1066 <atoi+0x22>
    1074:	1e f4       	brtc	.+6      	; 0x107c <atoi+0x38>
    1076:	90 95       	com	r25
    1078:	81 95       	neg	r24
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	08 95       	ret

0000107e <strtok>:
    107e:	40 e4       	ldi	r20, 0x40	; 64
    1080:	57 e0       	ldi	r21, 0x07	; 7
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <strtok_r>

00001084 <strcmp>:
    1084:	fb 01       	movw	r30, r22
    1086:	dc 01       	movw	r26, r24
    1088:	8d 91       	ld	r24, X+
    108a:	01 90       	ld	r0, Z+
    108c:	80 19       	sub	r24, r0
    108e:	01 10       	cpse	r0, r1
    1090:	d9 f3       	breq	.-10     	; 0x1088 <strcmp+0x4>
    1092:	99 0b       	sbc	r25, r25
    1094:	08 95       	ret

00001096 <strtok_r>:
    1096:	fa 01       	movw	r30, r20
    1098:	a1 91       	ld	r26, Z+
    109a:	b0 81       	ld	r27, Z
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	19 f4       	brne	.+6      	; 0x10a6 <strtok_r+0x10>
    10a0:	10 97       	sbiw	r26, 0x00	; 0
    10a2:	e1 f0       	breq	.+56     	; 0x10dc <strtok_r+0x46>
    10a4:	cd 01       	movw	r24, r26
    10a6:	dc 01       	movw	r26, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	0d 90       	ld	r0, X+
    10ac:	00 20       	and	r0, r0
    10ae:	11 f4       	brne	.+4      	; 0x10b4 <strtok_r+0x1e>
    10b0:	c0 01       	movw	r24, r0
    10b2:	13 c0       	rjmp	.+38     	; 0x10da <strtok_r+0x44>
    10b4:	fb 01       	movw	r30, r22
    10b6:	21 91       	ld	r18, Z+
    10b8:	22 23       	and	r18, r18
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <strtok_r+0x2c>
    10bc:	20 15       	cp	r18, r0
    10be:	d9 f7       	brne	.-10     	; 0x10b6 <strtok_r+0x20>
    10c0:	f3 cf       	rjmp	.-26     	; 0x10a8 <strtok_r+0x12>
    10c2:	fb 01       	movw	r30, r22
    10c4:	21 91       	ld	r18, Z+
    10c6:	20 15       	cp	r18, r0
    10c8:	19 f4       	brne	.+6      	; 0x10d0 <strtok_r+0x3a>
    10ca:	1e 92       	st	-X, r1
    10cc:	11 96       	adiw	r26, 0x01	; 1
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <strtok_r+0x46>
    10d0:	22 23       	and	r18, r18
    10d2:	c1 f7       	brne	.-16     	; 0x10c4 <strtok_r+0x2e>
    10d4:	0d 90       	ld	r0, X+
    10d6:	00 20       	and	r0, r0
    10d8:	a1 f7       	brne	.-24     	; 0x10c2 <strtok_r+0x2c>
    10da:	d0 01       	movw	r26, r0
    10dc:	fa 01       	movw	r30, r20
    10de:	a1 93       	st	Z+, r26
    10e0:	b0 83       	st	Z, r27
    10e2:	08 95       	ret

000010e4 <__mulhi_const_10>:
    10e4:	7a e0       	ldi	r23, 0x0A	; 10
    10e6:	97 9f       	mul	r25, r23
    10e8:	90 2d       	mov	r25, r0
    10ea:	87 9f       	mul	r24, r23
    10ec:	80 2d       	mov	r24, r0
    10ee:	91 0d       	add	r25, r1
    10f0:	11 24       	eor	r1, r1
    10f2:	08 95       	ret

000010f4 <sprintf>:
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	2e 97       	sbiw	r28, 0x0e	; 14
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	0d 89       	ldd	r16, Y+21	; 0x15
    110e:	1e 89       	ldd	r17, Y+22	; 0x16
    1110:	86 e0       	ldi	r24, 0x06	; 6
    1112:	8c 83       	std	Y+4, r24	; 0x04
    1114:	1a 83       	std	Y+2, r17	; 0x02
    1116:	09 83       	std	Y+1, r16	; 0x01
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	9f e7       	ldi	r25, 0x7F	; 127
    111c:	9e 83       	std	Y+6, r25	; 0x06
    111e:	8d 83       	std	Y+5, r24	; 0x05
    1120:	ae 01       	movw	r20, r28
    1122:	47 5e       	subi	r20, 0xE7	; 231
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	6f 89       	ldd	r22, Y+23	; 0x17
    1128:	78 8d       	ldd	r23, Y+24	; 0x18
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	31 d0       	rcall	.+98     	; 0x1192 <vfprintf>
    1130:	ef 81       	ldd	r30, Y+7	; 0x07
    1132:	f8 85       	ldd	r31, Y+8	; 0x08
    1134:	e0 0f       	add	r30, r16
    1136:	f1 1f       	adc	r31, r17
    1138:	10 82       	st	Z, r1
    113a:	2e 96       	adiw	r28, 0x0e	; 14
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	08 95       	ret

00001150 <sscanf>:
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	2e 97       	sbiw	r28, 0x0e	; 14
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	85 e0       	ldi	r24, 0x05	; 5
    1166:	8c 83       	std	Y+4, r24	; 0x04
    1168:	8b 89       	ldd	r24, Y+19	; 0x13
    116a:	9c 89       	ldd	r25, Y+20	; 0x14
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	ae 01       	movw	r20, r28
    1172:	49 5e       	subi	r20, 0xE9	; 233
    1174:	5f 4f       	sbci	r21, 0xFF	; 255
    1176:	6d 89       	ldd	r22, Y+21	; 0x15
    1178:	7e 89       	ldd	r23, Y+22	; 0x16
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	b8 d3       	rcall	.+1904   	; 0x18f0 <vfscanf>
    1180:	2e 96       	adiw	r28, 0x0e	; 14
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <vfprintf>:
    1192:	2f 92       	push	r2
    1194:	3f 92       	push	r3
    1196:	4f 92       	push	r4
    1198:	5f 92       	push	r5
    119a:	6f 92       	push	r6
    119c:	7f 92       	push	r7
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	2b 97       	sbiw	r28, 0x0b	; 11
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
    11c6:	6c 01       	movw	r12, r24
    11c8:	7b 01       	movw	r14, r22
    11ca:	8a 01       	movw	r16, r20
    11cc:	fc 01       	movw	r30, r24
    11ce:	17 82       	std	Z+7, r1	; 0x07
    11d0:	16 82       	std	Z+6, r1	; 0x06
    11d2:	83 81       	ldd	r24, Z+3	; 0x03
    11d4:	81 ff       	sbrs	r24, 1
    11d6:	bf c1       	rjmp	.+894    	; 0x1556 <vfprintf+0x3c4>
    11d8:	ce 01       	movw	r24, r28
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	3c 01       	movw	r6, r24
    11de:	f6 01       	movw	r30, r12
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	f7 01       	movw	r30, r14
    11e4:	93 fd       	sbrc	r25, 3
    11e6:	85 91       	lpm	r24, Z+
    11e8:	93 ff       	sbrs	r25, 3
    11ea:	81 91       	ld	r24, Z+
    11ec:	7f 01       	movw	r14, r30
    11ee:	88 23       	and	r24, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <vfprintf+0x62>
    11f2:	ad c1       	rjmp	.+858    	; 0x154e <vfprintf+0x3bc>
    11f4:	85 32       	cpi	r24, 0x25	; 37
    11f6:	39 f4       	brne	.+14     	; 0x1206 <vfprintf+0x74>
    11f8:	93 fd       	sbrc	r25, 3
    11fa:	85 91       	lpm	r24, Z+
    11fc:	93 ff       	sbrs	r25, 3
    11fe:	81 91       	ld	r24, Z+
    1200:	7f 01       	movw	r14, r30
    1202:	85 32       	cpi	r24, 0x25	; 37
    1204:	21 f4       	brne	.+8      	; 0x120e <vfprintf+0x7c>
    1206:	b6 01       	movw	r22, r12
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	f0 d4       	rcall	.+2528   	; 0x1bec <fputc>
    120c:	e8 cf       	rjmp	.-48     	; 0x11de <vfprintf+0x4c>
    120e:	91 2c       	mov	r9, r1
    1210:	21 2c       	mov	r2, r1
    1212:	31 2c       	mov	r3, r1
    1214:	ff e1       	ldi	r31, 0x1F	; 31
    1216:	f3 15       	cp	r31, r3
    1218:	d8 f0       	brcs	.+54     	; 0x1250 <vfprintf+0xbe>
    121a:	8b 32       	cpi	r24, 0x2B	; 43
    121c:	79 f0       	breq	.+30     	; 0x123c <vfprintf+0xaa>
    121e:	38 f4       	brcc	.+14     	; 0x122e <vfprintf+0x9c>
    1220:	80 32       	cpi	r24, 0x20	; 32
    1222:	79 f0       	breq	.+30     	; 0x1242 <vfprintf+0xb0>
    1224:	83 32       	cpi	r24, 0x23	; 35
    1226:	a1 f4       	brne	.+40     	; 0x1250 <vfprintf+0xbe>
    1228:	23 2d       	mov	r18, r3
    122a:	20 61       	ori	r18, 0x10	; 16
    122c:	1d c0       	rjmp	.+58     	; 0x1268 <vfprintf+0xd6>
    122e:	8d 32       	cpi	r24, 0x2D	; 45
    1230:	61 f0       	breq	.+24     	; 0x124a <vfprintf+0xb8>
    1232:	80 33       	cpi	r24, 0x30	; 48
    1234:	69 f4       	brne	.+26     	; 0x1250 <vfprintf+0xbe>
    1236:	23 2d       	mov	r18, r3
    1238:	21 60       	ori	r18, 0x01	; 1
    123a:	16 c0       	rjmp	.+44     	; 0x1268 <vfprintf+0xd6>
    123c:	83 2d       	mov	r24, r3
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	38 2e       	mov	r3, r24
    1242:	e3 2d       	mov	r30, r3
    1244:	e4 60       	ori	r30, 0x04	; 4
    1246:	3e 2e       	mov	r3, r30
    1248:	2a c0       	rjmp	.+84     	; 0x129e <vfprintf+0x10c>
    124a:	f3 2d       	mov	r31, r3
    124c:	f8 60       	ori	r31, 0x08	; 8
    124e:	1d c0       	rjmp	.+58     	; 0x128a <vfprintf+0xf8>
    1250:	37 fc       	sbrc	r3, 7
    1252:	2d c0       	rjmp	.+90     	; 0x12ae <vfprintf+0x11c>
    1254:	20 ed       	ldi	r18, 0xD0	; 208
    1256:	28 0f       	add	r18, r24
    1258:	2a 30       	cpi	r18, 0x0A	; 10
    125a:	40 f0       	brcs	.+16     	; 0x126c <vfprintf+0xda>
    125c:	8e 32       	cpi	r24, 0x2E	; 46
    125e:	b9 f4       	brne	.+46     	; 0x128e <vfprintf+0xfc>
    1260:	36 fc       	sbrc	r3, 6
    1262:	75 c1       	rjmp	.+746    	; 0x154e <vfprintf+0x3bc>
    1264:	23 2d       	mov	r18, r3
    1266:	20 64       	ori	r18, 0x40	; 64
    1268:	32 2e       	mov	r3, r18
    126a:	19 c0       	rjmp	.+50     	; 0x129e <vfprintf+0x10c>
    126c:	36 fe       	sbrs	r3, 6
    126e:	06 c0       	rjmp	.+12     	; 0x127c <vfprintf+0xea>
    1270:	8a e0       	ldi	r24, 0x0A	; 10
    1272:	98 9e       	mul	r9, r24
    1274:	20 0d       	add	r18, r0
    1276:	11 24       	eor	r1, r1
    1278:	92 2e       	mov	r9, r18
    127a:	11 c0       	rjmp	.+34     	; 0x129e <vfprintf+0x10c>
    127c:	ea e0       	ldi	r30, 0x0A	; 10
    127e:	2e 9e       	mul	r2, r30
    1280:	20 0d       	add	r18, r0
    1282:	11 24       	eor	r1, r1
    1284:	22 2e       	mov	r2, r18
    1286:	f3 2d       	mov	r31, r3
    1288:	f0 62       	ori	r31, 0x20	; 32
    128a:	3f 2e       	mov	r3, r31
    128c:	08 c0       	rjmp	.+16     	; 0x129e <vfprintf+0x10c>
    128e:	8c 36       	cpi	r24, 0x6C	; 108
    1290:	21 f4       	brne	.+8      	; 0x129a <vfprintf+0x108>
    1292:	83 2d       	mov	r24, r3
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	38 2e       	mov	r3, r24
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0x10c>
    129a:	88 36       	cpi	r24, 0x68	; 104
    129c:	41 f4       	brne	.+16     	; 0x12ae <vfprintf+0x11c>
    129e:	f7 01       	movw	r30, r14
    12a0:	93 fd       	sbrc	r25, 3
    12a2:	85 91       	lpm	r24, Z+
    12a4:	93 ff       	sbrs	r25, 3
    12a6:	81 91       	ld	r24, Z+
    12a8:	7f 01       	movw	r14, r30
    12aa:	81 11       	cpse	r24, r1
    12ac:	b3 cf       	rjmp	.-154    	; 0x1214 <vfprintf+0x82>
    12ae:	98 2f       	mov	r25, r24
    12b0:	9f 7d       	andi	r25, 0xDF	; 223
    12b2:	95 54       	subi	r25, 0x45	; 69
    12b4:	93 30       	cpi	r25, 0x03	; 3
    12b6:	28 f4       	brcc	.+10     	; 0x12c2 <vfprintf+0x130>
    12b8:	0c 5f       	subi	r16, 0xFC	; 252
    12ba:	1f 4f       	sbci	r17, 0xFF	; 255
    12bc:	9f e3       	ldi	r25, 0x3F	; 63
    12be:	99 83       	std	Y+1, r25	; 0x01
    12c0:	0d c0       	rjmp	.+26     	; 0x12dc <vfprintf+0x14a>
    12c2:	83 36       	cpi	r24, 0x63	; 99
    12c4:	31 f0       	breq	.+12     	; 0x12d2 <vfprintf+0x140>
    12c6:	83 37       	cpi	r24, 0x73	; 115
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <vfprintf+0x154>
    12ca:	83 35       	cpi	r24, 0x53	; 83
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <vfprintf+0x13e>
    12ce:	55 c0       	rjmp	.+170    	; 0x137a <vfprintf+0x1e8>
    12d0:	20 c0       	rjmp	.+64     	; 0x1312 <vfprintf+0x180>
    12d2:	f8 01       	movw	r30, r16
    12d4:	80 81       	ld	r24, Z
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	0e 5f       	subi	r16, 0xFE	; 254
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	88 24       	eor	r8, r8
    12de:	83 94       	inc	r8
    12e0:	91 2c       	mov	r9, r1
    12e2:	53 01       	movw	r10, r6
    12e4:	12 c0       	rjmp	.+36     	; 0x130a <vfprintf+0x178>
    12e6:	28 01       	movw	r4, r16
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	4f 0e       	add	r4, r31
    12ec:	51 1c       	adc	r5, r1
    12ee:	f8 01       	movw	r30, r16
    12f0:	a0 80       	ld	r10, Z
    12f2:	b1 80       	ldd	r11, Z+1	; 0x01
    12f4:	36 fe       	sbrs	r3, 6
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <vfprintf+0x16c>
    12f8:	69 2d       	mov	r22, r9
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <vfprintf+0x170>
    12fe:	6f ef       	ldi	r22, 0xFF	; 255
    1300:	7f ef       	ldi	r23, 0xFF	; 255
    1302:	c5 01       	movw	r24, r10
    1304:	2a d4       	rcall	.+2132   	; 0x1b5a <strnlen>
    1306:	4c 01       	movw	r8, r24
    1308:	82 01       	movw	r16, r4
    130a:	f3 2d       	mov	r31, r3
    130c:	ff 77       	andi	r31, 0x7F	; 127
    130e:	3f 2e       	mov	r3, r31
    1310:	15 c0       	rjmp	.+42     	; 0x133c <vfprintf+0x1aa>
    1312:	28 01       	movw	r4, r16
    1314:	22 e0       	ldi	r18, 0x02	; 2
    1316:	42 0e       	add	r4, r18
    1318:	51 1c       	adc	r5, r1
    131a:	f8 01       	movw	r30, r16
    131c:	a0 80       	ld	r10, Z
    131e:	b1 80       	ldd	r11, Z+1	; 0x01
    1320:	36 fe       	sbrs	r3, 6
    1322:	03 c0       	rjmp	.+6      	; 0x132a <vfprintf+0x198>
    1324:	69 2d       	mov	r22, r9
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	02 c0       	rjmp	.+4      	; 0x132e <vfprintf+0x19c>
    132a:	6f ef       	ldi	r22, 0xFF	; 255
    132c:	7f ef       	ldi	r23, 0xFF	; 255
    132e:	c5 01       	movw	r24, r10
    1330:	09 d4       	rcall	.+2066   	; 0x1b44 <strnlen_P>
    1332:	4c 01       	movw	r8, r24
    1334:	f3 2d       	mov	r31, r3
    1336:	f0 68       	ori	r31, 0x80	; 128
    1338:	3f 2e       	mov	r3, r31
    133a:	82 01       	movw	r16, r4
    133c:	33 fc       	sbrc	r3, 3
    133e:	19 c0       	rjmp	.+50     	; 0x1372 <vfprintf+0x1e0>
    1340:	82 2d       	mov	r24, r2
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	88 16       	cp	r8, r24
    1346:	99 06       	cpc	r9, r25
    1348:	a0 f4       	brcc	.+40     	; 0x1372 <vfprintf+0x1e0>
    134a:	b6 01       	movw	r22, r12
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	4d d4       	rcall	.+2202   	; 0x1bec <fputc>
    1352:	2a 94       	dec	r2
    1354:	f5 cf       	rjmp	.-22     	; 0x1340 <vfprintf+0x1ae>
    1356:	f5 01       	movw	r30, r10
    1358:	37 fc       	sbrc	r3, 7
    135a:	85 91       	lpm	r24, Z+
    135c:	37 fe       	sbrs	r3, 7
    135e:	81 91       	ld	r24, Z+
    1360:	5f 01       	movw	r10, r30
    1362:	b6 01       	movw	r22, r12
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	42 d4       	rcall	.+2180   	; 0x1bec <fputc>
    1368:	21 10       	cpse	r2, r1
    136a:	2a 94       	dec	r2
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	82 1a       	sub	r8, r18
    1370:	91 08       	sbc	r9, r1
    1372:	81 14       	cp	r8, r1
    1374:	91 04       	cpc	r9, r1
    1376:	79 f7       	brne	.-34     	; 0x1356 <vfprintf+0x1c4>
    1378:	e1 c0       	rjmp	.+450    	; 0x153c <vfprintf+0x3aa>
    137a:	84 36       	cpi	r24, 0x64	; 100
    137c:	11 f0       	breq	.+4      	; 0x1382 <vfprintf+0x1f0>
    137e:	89 36       	cpi	r24, 0x69	; 105
    1380:	39 f5       	brne	.+78     	; 0x13d0 <vfprintf+0x23e>
    1382:	f8 01       	movw	r30, r16
    1384:	37 fe       	sbrs	r3, 7
    1386:	07 c0       	rjmp	.+14     	; 0x1396 <vfprintf+0x204>
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	0c 5f       	subi	r16, 0xFC	; 252
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <vfprintf+0x214>
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	07 2e       	mov	r0, r23
    139c:	00 0c       	add	r0, r0
    139e:	88 0b       	sbc	r24, r24
    13a0:	99 0b       	sbc	r25, r25
    13a2:	0e 5f       	subi	r16, 0xFE	; 254
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	f3 2d       	mov	r31, r3
    13a8:	ff 76       	andi	r31, 0x6F	; 111
    13aa:	3f 2e       	mov	r3, r31
    13ac:	97 ff       	sbrs	r25, 7
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <vfprintf+0x230>
    13b0:	90 95       	com	r25
    13b2:	80 95       	com	r24
    13b4:	70 95       	com	r23
    13b6:	61 95       	neg	r22
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	8f 4f       	sbci	r24, 0xFF	; 255
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	f0 68       	ori	r31, 0x80	; 128
    13c0:	3f 2e       	mov	r3, r31
    13c2:	2a e0       	ldi	r18, 0x0A	; 10
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	a3 01       	movw	r20, r6
    13c8:	66 d4       	rcall	.+2252   	; 0x1c96 <__ultoa_invert>
    13ca:	88 2e       	mov	r8, r24
    13cc:	86 18       	sub	r8, r6
    13ce:	44 c0       	rjmp	.+136    	; 0x1458 <vfprintf+0x2c6>
    13d0:	85 37       	cpi	r24, 0x75	; 117
    13d2:	31 f4       	brne	.+12     	; 0x13e0 <vfprintf+0x24e>
    13d4:	23 2d       	mov	r18, r3
    13d6:	2f 7e       	andi	r18, 0xEF	; 239
    13d8:	b2 2e       	mov	r11, r18
    13da:	2a e0       	ldi	r18, 0x0A	; 10
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	25 c0       	rjmp	.+74     	; 0x142a <vfprintf+0x298>
    13e0:	93 2d       	mov	r25, r3
    13e2:	99 7f       	andi	r25, 0xF9	; 249
    13e4:	b9 2e       	mov	r11, r25
    13e6:	8f 36       	cpi	r24, 0x6F	; 111
    13e8:	c1 f0       	breq	.+48     	; 0x141a <vfprintf+0x288>
    13ea:	18 f4       	brcc	.+6      	; 0x13f2 <vfprintf+0x260>
    13ec:	88 35       	cpi	r24, 0x58	; 88
    13ee:	79 f0       	breq	.+30     	; 0x140e <vfprintf+0x27c>
    13f0:	ae c0       	rjmp	.+348    	; 0x154e <vfprintf+0x3bc>
    13f2:	80 37       	cpi	r24, 0x70	; 112
    13f4:	19 f0       	breq	.+6      	; 0x13fc <vfprintf+0x26a>
    13f6:	88 37       	cpi	r24, 0x78	; 120
    13f8:	21 f0       	breq	.+8      	; 0x1402 <vfprintf+0x270>
    13fa:	a9 c0       	rjmp	.+338    	; 0x154e <vfprintf+0x3bc>
    13fc:	e9 2f       	mov	r30, r25
    13fe:	e0 61       	ori	r30, 0x10	; 16
    1400:	be 2e       	mov	r11, r30
    1402:	b4 fe       	sbrs	r11, 4
    1404:	0d c0       	rjmp	.+26     	; 0x1420 <vfprintf+0x28e>
    1406:	fb 2d       	mov	r31, r11
    1408:	f4 60       	ori	r31, 0x04	; 4
    140a:	bf 2e       	mov	r11, r31
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <vfprintf+0x28e>
    140e:	34 fe       	sbrs	r3, 4
    1410:	0a c0       	rjmp	.+20     	; 0x1426 <vfprintf+0x294>
    1412:	29 2f       	mov	r18, r25
    1414:	26 60       	ori	r18, 0x06	; 6
    1416:	b2 2e       	mov	r11, r18
    1418:	06 c0       	rjmp	.+12     	; 0x1426 <vfprintf+0x294>
    141a:	28 e0       	ldi	r18, 0x08	; 8
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <vfprintf+0x298>
    1420:	20 e1       	ldi	r18, 0x10	; 16
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x298>
    1426:	20 e1       	ldi	r18, 0x10	; 16
    1428:	32 e0       	ldi	r19, 0x02	; 2
    142a:	f8 01       	movw	r30, r16
    142c:	b7 fe       	sbrs	r11, 7
    142e:	07 c0       	rjmp	.+14     	; 0x143e <vfprintf+0x2ac>
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	0c 5f       	subi	r16, 0xFC	; 252
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	06 c0       	rjmp	.+12     	; 0x144a <vfprintf+0x2b8>
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 5f       	subi	r16, 0xFE	; 254
    1448:	1f 4f       	sbci	r17, 0xFF	; 255
    144a:	a3 01       	movw	r20, r6
    144c:	24 d4       	rcall	.+2120   	; 0x1c96 <__ultoa_invert>
    144e:	88 2e       	mov	r8, r24
    1450:	86 18       	sub	r8, r6
    1452:	fb 2d       	mov	r31, r11
    1454:	ff 77       	andi	r31, 0x7F	; 127
    1456:	3f 2e       	mov	r3, r31
    1458:	36 fe       	sbrs	r3, 6
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <vfprintf+0x2e4>
    145c:	23 2d       	mov	r18, r3
    145e:	2e 7f       	andi	r18, 0xFE	; 254
    1460:	a2 2e       	mov	r10, r18
    1462:	89 14       	cp	r8, r9
    1464:	58 f4       	brcc	.+22     	; 0x147c <vfprintf+0x2ea>
    1466:	34 fe       	sbrs	r3, 4
    1468:	0b c0       	rjmp	.+22     	; 0x1480 <vfprintf+0x2ee>
    146a:	32 fc       	sbrc	r3, 2
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <vfprintf+0x2ee>
    146e:	83 2d       	mov	r24, r3
    1470:	8e 7e       	andi	r24, 0xEE	; 238
    1472:	a8 2e       	mov	r10, r24
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <vfprintf+0x2ee>
    1476:	b8 2c       	mov	r11, r8
    1478:	a3 2c       	mov	r10, r3
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <vfprintf+0x2f0>
    147c:	b8 2c       	mov	r11, r8
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <vfprintf+0x2f0>
    1480:	b9 2c       	mov	r11, r9
    1482:	a4 fe       	sbrs	r10, 4
    1484:	0f c0       	rjmp	.+30     	; 0x14a4 <vfprintf+0x312>
    1486:	fe 01       	movw	r30, r28
    1488:	e8 0d       	add	r30, r8
    148a:	f1 1d       	adc	r31, r1
    148c:	80 81       	ld	r24, Z
    148e:	80 33       	cpi	r24, 0x30	; 48
    1490:	21 f4       	brne	.+8      	; 0x149a <vfprintf+0x308>
    1492:	9a 2d       	mov	r25, r10
    1494:	99 7e       	andi	r25, 0xE9	; 233
    1496:	a9 2e       	mov	r10, r25
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <vfprintf+0x31a>
    149a:	a2 fe       	sbrs	r10, 2
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vfprintf+0x318>
    149e:	b3 94       	inc	r11
    14a0:	b3 94       	inc	r11
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <vfprintf+0x31a>
    14a4:	8a 2d       	mov	r24, r10
    14a6:	86 78       	andi	r24, 0x86	; 134
    14a8:	09 f0       	breq	.+2      	; 0x14ac <vfprintf+0x31a>
    14aa:	b3 94       	inc	r11
    14ac:	a3 fc       	sbrc	r10, 3
    14ae:	10 c0       	rjmp	.+32     	; 0x14d0 <vfprintf+0x33e>
    14b0:	a0 fe       	sbrs	r10, 0
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <vfprintf+0x32e>
    14b4:	b2 14       	cp	r11, r2
    14b6:	80 f4       	brcc	.+32     	; 0x14d8 <vfprintf+0x346>
    14b8:	28 0c       	add	r2, r8
    14ba:	92 2c       	mov	r9, r2
    14bc:	9b 18       	sub	r9, r11
    14be:	0d c0       	rjmp	.+26     	; 0x14da <vfprintf+0x348>
    14c0:	b2 14       	cp	r11, r2
    14c2:	58 f4       	brcc	.+22     	; 0x14da <vfprintf+0x348>
    14c4:	b6 01       	movw	r22, r12
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	90 d3       	rcall	.+1824   	; 0x1bec <fputc>
    14cc:	b3 94       	inc	r11
    14ce:	f8 cf       	rjmp	.-16     	; 0x14c0 <vfprintf+0x32e>
    14d0:	b2 14       	cp	r11, r2
    14d2:	18 f4       	brcc	.+6      	; 0x14da <vfprintf+0x348>
    14d4:	2b 18       	sub	r2, r11
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <vfprintf+0x34a>
    14d8:	98 2c       	mov	r9, r8
    14da:	21 2c       	mov	r2, r1
    14dc:	a4 fe       	sbrs	r10, 4
    14de:	0f c0       	rjmp	.+30     	; 0x14fe <vfprintf+0x36c>
    14e0:	b6 01       	movw	r22, r12
    14e2:	80 e3       	ldi	r24, 0x30	; 48
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	82 d3       	rcall	.+1796   	; 0x1bec <fputc>
    14e8:	a2 fe       	sbrs	r10, 2
    14ea:	16 c0       	rjmp	.+44     	; 0x1518 <vfprintf+0x386>
    14ec:	a1 fc       	sbrc	r10, 1
    14ee:	03 c0       	rjmp	.+6      	; 0x14f6 <vfprintf+0x364>
    14f0:	88 e7       	ldi	r24, 0x78	; 120
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <vfprintf+0x368>
    14f6:	88 e5       	ldi	r24, 0x58	; 88
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	b6 01       	movw	r22, r12
    14fc:	0c c0       	rjmp	.+24     	; 0x1516 <vfprintf+0x384>
    14fe:	8a 2d       	mov	r24, r10
    1500:	86 78       	andi	r24, 0x86	; 134
    1502:	51 f0       	breq	.+20     	; 0x1518 <vfprintf+0x386>
    1504:	a1 fe       	sbrs	r10, 1
    1506:	02 c0       	rjmp	.+4      	; 0x150c <vfprintf+0x37a>
    1508:	8b e2       	ldi	r24, 0x2B	; 43
    150a:	01 c0       	rjmp	.+2      	; 0x150e <vfprintf+0x37c>
    150c:	80 e2       	ldi	r24, 0x20	; 32
    150e:	a7 fc       	sbrc	r10, 7
    1510:	8d e2       	ldi	r24, 0x2D	; 45
    1512:	b6 01       	movw	r22, r12
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	6a d3       	rcall	.+1748   	; 0x1bec <fputc>
    1518:	89 14       	cp	r8, r9
    151a:	30 f4       	brcc	.+12     	; 0x1528 <vfprintf+0x396>
    151c:	b6 01       	movw	r22, r12
    151e:	80 e3       	ldi	r24, 0x30	; 48
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	64 d3       	rcall	.+1736   	; 0x1bec <fputc>
    1524:	9a 94       	dec	r9
    1526:	f8 cf       	rjmp	.-16     	; 0x1518 <vfprintf+0x386>
    1528:	8a 94       	dec	r8
    152a:	f3 01       	movw	r30, r6
    152c:	e8 0d       	add	r30, r8
    152e:	f1 1d       	adc	r31, r1
    1530:	80 81       	ld	r24, Z
    1532:	b6 01       	movw	r22, r12
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	5a d3       	rcall	.+1716   	; 0x1bec <fputc>
    1538:	81 10       	cpse	r8, r1
    153a:	f6 cf       	rjmp	.-20     	; 0x1528 <vfprintf+0x396>
    153c:	22 20       	and	r2, r2
    153e:	09 f4       	brne	.+2      	; 0x1542 <vfprintf+0x3b0>
    1540:	4e ce       	rjmp	.-868    	; 0x11de <vfprintf+0x4c>
    1542:	b6 01       	movw	r22, r12
    1544:	80 e2       	ldi	r24, 0x20	; 32
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	51 d3       	rcall	.+1698   	; 0x1bec <fputc>
    154a:	2a 94       	dec	r2
    154c:	f7 cf       	rjmp	.-18     	; 0x153c <vfprintf+0x3aa>
    154e:	f6 01       	movw	r30, r12
    1550:	86 81       	ldd	r24, Z+6	; 0x06
    1552:	97 81       	ldd	r25, Z+7	; 0x07
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x3c8>
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	2b 96       	adiw	r28, 0x0b	; 11
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	8f 90       	pop	r8
    157e:	7f 90       	pop	r7
    1580:	6f 90       	pop	r6
    1582:	5f 90       	pop	r5
    1584:	4f 90       	pop	r4
    1586:	3f 90       	pop	r3
    1588:	2f 90       	pop	r2
    158a:	08 95       	ret

0000158c <putval>:
    158c:	20 fd       	sbrc	r18, 0
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <putval+0x16>
    1590:	fc 01       	movw	r30, r24
    1592:	23 fd       	sbrc	r18, 3
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <putval+0x14>
    1596:	22 ff       	sbrs	r18, 2
    1598:	02 c0       	rjmp	.+4      	; 0x159e <putval+0x12>
    159a:	73 83       	std	Z+3, r23	; 0x03
    159c:	62 83       	std	Z+2, r22	; 0x02
    159e:	51 83       	std	Z+1, r21	; 0x01
    15a0:	40 83       	st	Z, r20
    15a2:	08 95       	ret

000015a4 <mulacc>:
    15a4:	44 fd       	sbrc	r20, 4
    15a6:	17 c0       	rjmp	.+46     	; 0x15d6 <mulacc+0x32>
    15a8:	46 fd       	sbrc	r20, 6
    15aa:	17 c0       	rjmp	.+46     	; 0x15da <mulacc+0x36>
    15ac:	ab 01       	movw	r20, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	da 01       	movw	r26, r20
    15b2:	fb 01       	movw	r30, r22
    15b4:	aa 0f       	add	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	ee 1f       	adc	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	10 94       	com	r1
    15be:	d1 f7       	brne	.-12     	; 0x15b4 <mulacc+0x10>
    15c0:	4a 0f       	add	r20, r26
    15c2:	5b 1f       	adc	r21, r27
    15c4:	6e 1f       	adc	r22, r30
    15c6:	7f 1f       	adc	r23, r31
    15c8:	cb 01       	movw	r24, r22
    15ca:	ba 01       	movw	r22, r20
    15cc:	66 0f       	add	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	88 1f       	adc	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <mulacc+0x44>
    15d6:	33 e0       	ldi	r19, 0x03	; 3
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <mulacc+0x38>
    15da:	34 e0       	ldi	r19, 0x04	; 4
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	31 50       	subi	r19, 0x01	; 1
    15e6:	d1 f7       	brne	.-12     	; 0x15dc <mulacc+0x38>
    15e8:	62 0f       	add	r22, r18
    15ea:	71 1d       	adc	r23, r1
    15ec:	81 1d       	adc	r24, r1
    15ee:	91 1d       	adc	r25, r1
    15f0:	08 95       	ret

000015f2 <skip_spaces>:
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	8c 01       	movw	r16, r24
    15fc:	c8 01       	movw	r24, r16
    15fe:	b8 d2       	rcall	.+1392   	; 0x1b70 <fgetc>
    1600:	ec 01       	movw	r28, r24
    1602:	97 fd       	sbrc	r25, 7
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <skip_spaces+0x20>
    1606:	8b d2       	rcall	.+1302   	; 0x1b1e <isspace>
    1608:	89 2b       	or	r24, r25
    160a:	c1 f7       	brne	.-16     	; 0x15fc <skip_spaces+0xa>
    160c:	b8 01       	movw	r22, r16
    160e:	ce 01       	movw	r24, r28
    1610:	29 d3       	rcall	.+1618   	; 0x1c64 <ungetc>
    1612:	ce 01       	movw	r24, r28
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <conv_int>:
    161e:	8f 92       	push	r8
    1620:	9f 92       	push	r9
    1622:	af 92       	push	r10
    1624:	bf 92       	push	r11
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	8c 01       	movw	r16, r24
    1634:	d6 2f       	mov	r29, r22
    1636:	7a 01       	movw	r14, r20
    1638:	b2 2e       	mov	r11, r18
    163a:	9a d2       	rcall	.+1332   	; 0x1b70 <fgetc>
    163c:	9c 01       	movw	r18, r24
    163e:	33 27       	eor	r19, r19
    1640:	2b 32       	cpi	r18, 0x2B	; 43
    1642:	31 05       	cpc	r19, r1
    1644:	31 f0       	breq	.+12     	; 0x1652 <conv_int+0x34>
    1646:	2d 32       	cpi	r18, 0x2D	; 45
    1648:	31 05       	cpc	r19, r1
    164a:	59 f4       	brne	.+22     	; 0x1662 <conv_int+0x44>
    164c:	8b 2d       	mov	r24, r11
    164e:	80 68       	ori	r24, 0x80	; 128
    1650:	b8 2e       	mov	r11, r24
    1652:	d1 50       	subi	r29, 0x01	; 1
    1654:	11 f4       	brne	.+4      	; 0x165a <conv_int+0x3c>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	61 c0       	rjmp	.+194    	; 0x171c <conv_int+0xfe>
    165a:	c8 01       	movw	r24, r16
    165c:	89 d2       	rcall	.+1298   	; 0x1b70 <fgetc>
    165e:	97 fd       	sbrc	r25, 7
    1660:	fa cf       	rjmp	.-12     	; 0x1656 <conv_int+0x38>
    1662:	cb 2d       	mov	r28, r11
    1664:	cd 7f       	andi	r28, 0xFD	; 253
    1666:	2b 2d       	mov	r18, r11
    1668:	20 73       	andi	r18, 0x30	; 48
    166a:	f9 f4       	brne	.+62     	; 0x16aa <conv_int+0x8c>
    166c:	80 33       	cpi	r24, 0x30	; 48
    166e:	e9 f4       	brne	.+58     	; 0x16aa <conv_int+0x8c>
    1670:	aa 24       	eor	r10, r10
    1672:	aa 94       	dec	r10
    1674:	ad 0e       	add	r10, r29
    1676:	09 f4       	brne	.+2      	; 0x167a <conv_int+0x5c>
    1678:	3e c0       	rjmp	.+124    	; 0x16f6 <conv_int+0xd8>
    167a:	c8 01       	movw	r24, r16
    167c:	79 d2       	rcall	.+1266   	; 0x1b70 <fgetc>
    167e:	97 fd       	sbrc	r25, 7
    1680:	3a c0       	rjmp	.+116    	; 0x16f6 <conv_int+0xd8>
    1682:	9c 01       	movw	r18, r24
    1684:	2f 7d       	andi	r18, 0xDF	; 223
    1686:	33 27       	eor	r19, r19
    1688:	28 35       	cpi	r18, 0x58	; 88
    168a:	31 05       	cpc	r19, r1
    168c:	41 f4       	brne	.+16     	; 0x169e <conv_int+0x80>
    168e:	c2 64       	ori	r28, 0x42	; 66
    1690:	d2 50       	subi	r29, 0x02	; 2
    1692:	89 f1       	breq	.+98     	; 0x16f6 <conv_int+0xd8>
    1694:	c8 01       	movw	r24, r16
    1696:	6c d2       	rcall	.+1240   	; 0x1b70 <fgetc>
    1698:	97 ff       	sbrs	r25, 7
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <conv_int+0x8c>
    169c:	2c c0       	rjmp	.+88     	; 0x16f6 <conv_int+0xd8>
    169e:	b6 fe       	sbrs	r11, 6
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <conv_int+0x88>
    16a2:	c2 60       	ori	r28, 0x02	; 2
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <conv_int+0x8a>
    16a6:	c2 61       	ori	r28, 0x12	; 18
    16a8:	da 2d       	mov	r29, r10
    16aa:	81 2c       	mov	r8, r1
    16ac:	91 2c       	mov	r9, r1
    16ae:	54 01       	movw	r10, r8
    16b0:	20 ed       	ldi	r18, 0xD0	; 208
    16b2:	28 0f       	add	r18, r24
    16b4:	28 30       	cpi	r18, 0x08	; 8
    16b6:	78 f0       	brcs	.+30     	; 0x16d6 <conv_int+0xb8>
    16b8:	c4 ff       	sbrs	r28, 4
    16ba:	03 c0       	rjmp	.+6      	; 0x16c2 <conv_int+0xa4>
    16bc:	b8 01       	movw	r22, r16
    16be:	d2 d2       	rcall	.+1444   	; 0x1c64 <ungetc>
    16c0:	17 c0       	rjmp	.+46     	; 0x16f0 <conv_int+0xd2>
    16c2:	2a 30       	cpi	r18, 0x0A	; 10
    16c4:	40 f0       	brcs	.+16     	; 0x16d6 <conv_int+0xb8>
    16c6:	c6 ff       	sbrs	r28, 6
    16c8:	f9 cf       	rjmp	.-14     	; 0x16bc <conv_int+0x9e>
    16ca:	2f 7d       	andi	r18, 0xDF	; 223
    16cc:	3f ee       	ldi	r19, 0xEF	; 239
    16ce:	32 0f       	add	r19, r18
    16d0:	36 30       	cpi	r19, 0x06	; 6
    16d2:	a0 f7       	brcc	.-24     	; 0x16bc <conv_int+0x9e>
    16d4:	27 50       	subi	r18, 0x07	; 7
    16d6:	4c 2f       	mov	r20, r28
    16d8:	c5 01       	movw	r24, r10
    16da:	b4 01       	movw	r22, r8
    16dc:	63 df       	rcall	.-314    	; 0x15a4 <mulacc>
    16de:	4b 01       	movw	r8, r22
    16e0:	5c 01       	movw	r10, r24
    16e2:	c2 60       	ori	r28, 0x02	; 2
    16e4:	d1 50       	subi	r29, 0x01	; 1
    16e6:	51 f0       	breq	.+20     	; 0x16fc <conv_int+0xde>
    16e8:	c8 01       	movw	r24, r16
    16ea:	42 d2       	rcall	.+1156   	; 0x1b70 <fgetc>
    16ec:	97 ff       	sbrs	r25, 7
    16ee:	e0 cf       	rjmp	.-64     	; 0x16b0 <conv_int+0x92>
    16f0:	c1 fd       	sbrc	r28, 1
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <conv_int+0xde>
    16f4:	b0 cf       	rjmp	.-160    	; 0x1656 <conv_int+0x38>
    16f6:	81 2c       	mov	r8, r1
    16f8:	91 2c       	mov	r9, r1
    16fa:	54 01       	movw	r10, r8
    16fc:	c7 ff       	sbrs	r28, 7
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <conv_int+0xf2>
    1700:	b0 94       	com	r11
    1702:	a0 94       	com	r10
    1704:	90 94       	com	r9
    1706:	80 94       	com	r8
    1708:	81 1c       	adc	r8, r1
    170a:	91 1c       	adc	r9, r1
    170c:	a1 1c       	adc	r10, r1
    170e:	b1 1c       	adc	r11, r1
    1710:	2c 2f       	mov	r18, r28
    1712:	b5 01       	movw	r22, r10
    1714:	a4 01       	movw	r20, r8
    1716:	c7 01       	movw	r24, r14
    1718:	39 df       	rcall	.-398    	; 0x158c <putval>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	08 95       	ret

00001732 <conv_brk>:
    1732:	5f 92       	push	r5
    1734:	6f 92       	push	r6
    1736:	7f 92       	push	r7
    1738:	8f 92       	push	r8
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	a0 97       	sbiw	r28, 0x20	; 32
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	5c 01       	movw	r10, r24
    1762:	96 2e       	mov	r9, r22
    1764:	7a 01       	movw	r14, r20
    1766:	f9 01       	movw	r30, r18
    1768:	8e 01       	movw	r16, r28
    176a:	0f 5f       	subi	r16, 0xFF	; 255
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	68 01       	movw	r12, r16
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	d8 01       	movw	r26, r16
    1774:	1d 92       	st	X+, r1
    1776:	8a 95       	dec	r24
    1778:	e9 f7       	brne	.-6      	; 0x1774 <conv_brk+0x42>
    177a:	d5 01       	movw	r26, r10
    177c:	13 96       	adiw	r26, 0x03	; 3
    177e:	8c 90       	ld	r8, X
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	61 2c       	mov	r6, r1
    1786:	71 2c       	mov	r7, r1
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	83 fc       	sbrc	r8, 3
    1790:	25 91       	lpm	r18, Z+
    1792:	83 fe       	sbrs	r8, 3
    1794:	21 91       	ld	r18, Z+
    1796:	8f 01       	movw	r16, r30
    1798:	52 2e       	mov	r5, r18
    179a:	21 11       	cpse	r18, r1
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <conv_brk+0x72>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	90 c0       	rjmp	.+288    	; 0x18c4 <conv_brk+0x192>
    17a4:	2e 35       	cpi	r18, 0x5E	; 94
    17a6:	11 f4       	brne	.+4      	; 0x17ac <conv_brk+0x7a>
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	51 f1       	breq	.+84     	; 0x1800 <conv_brk+0xce>
    17ac:	43 2f       	mov	r20, r19
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	48 17       	cp	r20, r24
    17b2:	59 07       	cpc	r21, r25
    17b4:	3c f4       	brge	.+14     	; 0x17c4 <conv_brk+0x92>
    17b6:	2d 35       	cpi	r18, 0x5D	; 93
    17b8:	59 f1       	breq	.+86     	; 0x1810 <conv_brk+0xde>
    17ba:	2d 32       	cpi	r18, 0x2D	; 45
    17bc:	19 f4       	brne	.+6      	; 0x17c4 <conv_brk+0x92>
    17be:	77 20       	and	r7, r7
    17c0:	09 f1       	breq	.+66     	; 0x1804 <conv_brk+0xd2>
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <conv_brk+0x98>
    17c4:	77 20       	and	r7, r7
    17c6:	09 f4       	brne	.+2      	; 0x17ca <conv_brk+0x98>
    17c8:	68 c0       	rjmp	.+208    	; 0x189a <conv_brk+0x168>
    17ca:	45 2d       	mov	r20, r5
    17cc:	46 95       	lsr	r20
    17ce:	46 95       	lsr	r20
    17d0:	46 95       	lsr	r20
    17d2:	d6 01       	movw	r26, r12
    17d4:	a4 0f       	add	r26, r20
    17d6:	b1 1d       	adc	r27, r1
    17d8:	45 2d       	mov	r20, r5
    17da:	47 70       	andi	r20, 0x07	; 7
    17dc:	8b 01       	movw	r16, r22
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <conv_brk+0xb2>
    17e0:	00 0f       	add	r16, r16
    17e2:	11 1f       	adc	r17, r17
    17e4:	4a 95       	dec	r20
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <conv_brk+0xae>
    17e8:	a8 01       	movw	r20, r16
    17ea:	5c 91       	ld	r21, X
    17ec:	45 2b       	or	r20, r21
    17ee:	4c 93       	st	X, r20
    17f0:	65 14       	cp	r6, r5
    17f2:	59 f0       	breq	.+22     	; 0x180a <conv_brk+0xd8>
    17f4:	56 14       	cp	r5, r6
    17f6:	10 f4       	brcc	.+4      	; 0x17fc <conv_brk+0xca>
    17f8:	53 94       	inc	r5
    17fa:	e7 cf       	rjmp	.-50     	; 0x17ca <conv_brk+0x98>
    17fc:	5a 94       	dec	r5
    17fe:	e5 cf       	rjmp	.-54     	; 0x17ca <conv_brk+0x98>
    1800:	31 e0       	ldi	r19, 0x01	; 1
    1802:	04 c0       	rjmp	.+8      	; 0x180c <conv_brk+0xda>
    1804:	77 24       	eor	r7, r7
    1806:	73 94       	inc	r7
    1808:	01 c0       	rjmp	.+2      	; 0x180c <conv_brk+0xda>
    180a:	71 2c       	mov	r7, r1
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	bf cf       	rjmp	.-130    	; 0x178e <conv_brk+0x5c>
    1810:	77 20       	and	r7, r7
    1812:	19 f0       	breq	.+6      	; 0x181a <conv_brk+0xe8>
    1814:	8e 81       	ldd	r24, Y+6	; 0x06
    1816:	80 62       	ori	r24, 0x20	; 32
    1818:	8e 83       	std	Y+6, r24	; 0x06
    181a:	31 11       	cpse	r19, r1
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <conv_brk+0xf2>
    181e:	88 24       	eor	r8, r8
    1820:	83 94       	inc	r8
    1822:	17 c0       	rjmp	.+46     	; 0x1852 <conv_brk+0x120>
    1824:	f6 01       	movw	r30, r12
    1826:	9e 01       	movw	r18, r28
    1828:	2f 5d       	subi	r18, 0xDF	; 223
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	80 95       	com	r24
    1830:	81 93       	st	Z+, r24
    1832:	2e 17       	cp	r18, r30
    1834:	3f 07       	cpc	r19, r31
    1836:	d1 f7       	brne	.-12     	; 0x182c <conv_brk+0xfa>
    1838:	f2 cf       	rjmp	.-28     	; 0x181e <conv_brk+0xec>
    183a:	e1 14       	cp	r14, r1
    183c:	f1 04       	cpc	r15, r1
    183e:	29 f0       	breq	.+10     	; 0x184a <conv_brk+0x118>
    1840:	d7 01       	movw	r26, r14
    1842:	8c 93       	st	X, r24
    1844:	f7 01       	movw	r30, r14
    1846:	31 96       	adiw	r30, 0x01	; 1
    1848:	7f 01       	movw	r14, r30
    184a:	9a 94       	dec	r9
    184c:	81 2c       	mov	r8, r1
    184e:	99 20       	and	r9, r9
    1850:	e9 f0       	breq	.+58     	; 0x188c <conv_brk+0x15a>
    1852:	c5 01       	movw	r24, r10
    1854:	8d d1       	rcall	.+794    	; 0x1b70 <fgetc>
    1856:	97 fd       	sbrc	r25, 7
    1858:	17 c0       	rjmp	.+46     	; 0x1888 <conv_brk+0x156>
    185a:	fc 01       	movw	r30, r24
    185c:	ff 27       	eor	r31, r31
    185e:	23 e0       	ldi	r18, 0x03	; 3
    1860:	f5 95       	asr	r31
    1862:	e7 95       	ror	r30
    1864:	2a 95       	dec	r18
    1866:	e1 f7       	brne	.-8      	; 0x1860 <conv_brk+0x12e>
    1868:	ec 0d       	add	r30, r12
    186a:	fd 1d       	adc	r31, r13
    186c:	20 81       	ld	r18, Z
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	ac 01       	movw	r20, r24
    1872:	47 70       	andi	r20, 0x07	; 7
    1874:	55 27       	eor	r21, r21
    1876:	02 c0       	rjmp	.+4      	; 0x187c <conv_brk+0x14a>
    1878:	35 95       	asr	r19
    187a:	27 95       	ror	r18
    187c:	4a 95       	dec	r20
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <conv_brk+0x146>
    1880:	20 fd       	sbrc	r18, 0
    1882:	db cf       	rjmp	.-74     	; 0x183a <conv_brk+0x108>
    1884:	b5 01       	movw	r22, r10
    1886:	ee d1       	rcall	.+988    	; 0x1c64 <ungetc>
    1888:	81 10       	cpse	r8, r1
    188a:	89 cf       	rjmp	.-238    	; 0x179e <conv_brk+0x6c>
    188c:	e1 14       	cp	r14, r1
    188e:	f1 04       	cpc	r15, r1
    1890:	11 f0       	breq	.+4      	; 0x1896 <conv_brk+0x164>
    1892:	d7 01       	movw	r26, r14
    1894:	1c 92       	st	X, r1
    1896:	c8 01       	movw	r24, r16
    1898:	15 c0       	rjmp	.+42     	; 0x18c4 <conv_brk+0x192>
    189a:	42 2f       	mov	r20, r18
    189c:	46 95       	lsr	r20
    189e:	46 95       	lsr	r20
    18a0:	46 95       	lsr	r20
    18a2:	d6 01       	movw	r26, r12
    18a4:	a4 0f       	add	r26, r20
    18a6:	b1 1d       	adc	r27, r1
    18a8:	42 2f       	mov	r20, r18
    18aa:	47 70       	andi	r20, 0x07	; 7
    18ac:	8b 01       	movw	r16, r22
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <conv_brk+0x182>
    18b0:	00 0f       	add	r16, r16
    18b2:	11 1f       	adc	r17, r17
    18b4:	4a 95       	dec	r20
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <conv_brk+0x17e>
    18b8:	a8 01       	movw	r20, r16
    18ba:	5c 91       	ld	r21, X
    18bc:	45 2b       	or	r20, r21
    18be:	4c 93       	st	X, r20
    18c0:	62 2e       	mov	r6, r18
    18c2:	a4 cf       	rjmp	.-184    	; 0x180c <conv_brk+0xda>
    18c4:	a0 96       	adiw	r28, 0x20	; 32
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	ff 90       	pop	r15
    18da:	ef 90       	pop	r14
    18dc:	df 90       	pop	r13
    18de:	cf 90       	pop	r12
    18e0:	bf 90       	pop	r11
    18e2:	af 90       	pop	r10
    18e4:	9f 90       	pop	r9
    18e6:	8f 90       	pop	r8
    18e8:	7f 90       	pop	r7
    18ea:	6f 90       	pop	r6
    18ec:	5f 90       	pop	r5
    18ee:	08 95       	ret

000018f0 <vfscanf>:
    18f0:	5f 92       	push	r5
    18f2:	6f 92       	push	r6
    18f4:	7f 92       	push	r7
    18f6:	8f 92       	push	r8
    18f8:	9f 92       	push	r9
    18fa:	af 92       	push	r10
    18fc:	bf 92       	push	r11
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	6c 01       	movw	r12, r24
    1910:	eb 01       	movw	r28, r22
    1912:	5a 01       	movw	r10, r20
    1914:	fc 01       	movw	r30, r24
    1916:	17 82       	std	Z+7, r1	; 0x07
    1918:	16 82       	std	Z+6, r1	; 0x06
    191a:	51 2c       	mov	r5, r1
    191c:	f6 01       	movw	r30, r12
    191e:	e3 80       	ldd	r14, Z+3	; 0x03
    1920:	fe 01       	movw	r30, r28
    1922:	e3 fc       	sbrc	r14, 3
    1924:	85 91       	lpm	r24, Z+
    1926:	e3 fe       	sbrs	r14, 3
    1928:	81 91       	ld	r24, Z+
    192a:	18 2f       	mov	r17, r24
    192c:	ef 01       	movw	r28, r30
    192e:	88 23       	and	r24, r24
    1930:	09 f4       	brne	.+2      	; 0x1934 <vfscanf+0x44>
    1932:	e0 c0       	rjmp	.+448    	; 0x1af4 <vfscanf+0x204>
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	f3 d0       	rcall	.+486    	; 0x1b1e <isspace>
    1938:	89 2b       	or	r24, r25
    193a:	19 f0       	breq	.+6      	; 0x1942 <vfscanf+0x52>
    193c:	c6 01       	movw	r24, r12
    193e:	59 de       	rcall	.-846    	; 0x15f2 <skip_spaces>
    1940:	ed cf       	rjmp	.-38     	; 0x191c <vfscanf+0x2c>
    1942:	15 32       	cpi	r17, 0x25	; 37
    1944:	41 f4       	brne	.+16     	; 0x1956 <vfscanf+0x66>
    1946:	fe 01       	movw	r30, r28
    1948:	e3 fc       	sbrc	r14, 3
    194a:	15 91       	lpm	r17, Z+
    194c:	e3 fe       	sbrs	r14, 3
    194e:	11 91       	ld	r17, Z+
    1950:	ef 01       	movw	r28, r30
    1952:	15 32       	cpi	r17, 0x25	; 37
    1954:	71 f4       	brne	.+28     	; 0x1972 <vfscanf+0x82>
    1956:	c6 01       	movw	r24, r12
    1958:	0b d1       	rcall	.+534    	; 0x1b70 <fgetc>
    195a:	97 fd       	sbrc	r25, 7
    195c:	c9 c0       	rjmp	.+402    	; 0x1af0 <vfscanf+0x200>
    195e:	41 2f       	mov	r20, r17
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	9c 01       	movw	r18, r24
    1964:	33 27       	eor	r19, r19
    1966:	24 17       	cp	r18, r20
    1968:	35 07       	cpc	r19, r21
    196a:	c1 f2       	breq	.-80     	; 0x191c <vfscanf+0x2c>
    196c:	b6 01       	movw	r22, r12
    196e:	7a d1       	rcall	.+756    	; 0x1c64 <ungetc>
    1970:	c1 c0       	rjmp	.+386    	; 0x1af4 <vfscanf+0x204>
    1972:	1a 32       	cpi	r17, 0x2A	; 42
    1974:	39 f4       	brne	.+14     	; 0x1984 <vfscanf+0x94>
    1976:	e3 fc       	sbrc	r14, 3
    1978:	15 91       	lpm	r17, Z+
    197a:	e3 fe       	sbrs	r14, 3
    197c:	11 91       	ld	r17, Z+
    197e:	ef 01       	movw	r28, r30
    1980:	01 e0       	ldi	r16, 0x01	; 1
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <vfscanf+0x96>
    1984:	00 e0       	ldi	r16, 0x00	; 0
    1986:	f1 2c       	mov	r15, r1
    1988:	20 ed       	ldi	r18, 0xD0	; 208
    198a:	21 0f       	add	r18, r17
    198c:	2a 30       	cpi	r18, 0x0A	; 10
    198e:	78 f4       	brcc	.+30     	; 0x19ae <vfscanf+0xbe>
    1990:	02 60       	ori	r16, 0x02	; 2
    1992:	6f 2d       	mov	r22, r15
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	03 de       	rcall	.-1018   	; 0x15a4 <mulacc>
    199e:	f6 2e       	mov	r15, r22
    19a0:	fe 01       	movw	r30, r28
    19a2:	e3 fc       	sbrc	r14, 3
    19a4:	15 91       	lpm	r17, Z+
    19a6:	e3 fe       	sbrs	r14, 3
    19a8:	11 91       	ld	r17, Z+
    19aa:	ef 01       	movw	r28, r30
    19ac:	ed cf       	rjmp	.-38     	; 0x1988 <vfscanf+0x98>
    19ae:	01 ff       	sbrs	r16, 1
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <vfscanf+0xc8>
    19b2:	f1 10       	cpse	r15, r1
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <vfscanf+0xcc>
    19b6:	9e c0       	rjmp	.+316    	; 0x1af4 <vfscanf+0x204>
    19b8:	ff 24       	eor	r15, r15
    19ba:	fa 94       	dec	r15
    19bc:	18 36       	cpi	r17, 0x68	; 104
    19be:	19 f0       	breq	.+6      	; 0x19c6 <vfscanf+0xd6>
    19c0:	1c 36       	cpi	r17, 0x6C	; 108
    19c2:	51 f0       	breq	.+20     	; 0x19d8 <vfscanf+0xe8>
    19c4:	10 c0       	rjmp	.+32     	; 0x19e6 <vfscanf+0xf6>
    19c6:	fe 01       	movw	r30, r28
    19c8:	e3 fc       	sbrc	r14, 3
    19ca:	15 91       	lpm	r17, Z+
    19cc:	e3 fe       	sbrs	r14, 3
    19ce:	11 91       	ld	r17, Z+
    19d0:	ef 01       	movw	r28, r30
    19d2:	18 36       	cpi	r17, 0x68	; 104
    19d4:	41 f4       	brne	.+16     	; 0x19e6 <vfscanf+0xf6>
    19d6:	08 60       	ori	r16, 0x08	; 8
    19d8:	04 60       	ori	r16, 0x04	; 4
    19da:	fe 01       	movw	r30, r28
    19dc:	e3 fc       	sbrc	r14, 3
    19de:	15 91       	lpm	r17, Z+
    19e0:	e3 fe       	sbrs	r14, 3
    19e2:	11 91       	ld	r17, Z+
    19e4:	ef 01       	movw	r28, r30
    19e6:	11 23       	and	r17, r17
    19e8:	09 f4       	brne	.+2      	; 0x19ec <vfscanf+0xfc>
    19ea:	84 c0       	rjmp	.+264    	; 0x1af4 <vfscanf+0x204>
    19ec:	61 2f       	mov	r22, r17
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	86 e2       	ldi	r24, 0x26	; 38
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	9c d0       	rcall	.+312    	; 0x1b2e <strchr_P>
    19f6:	89 2b       	or	r24, r25
    19f8:	09 f4       	brne	.+2      	; 0x19fc <vfscanf+0x10c>
    19fa:	7c c0       	rjmp	.+248    	; 0x1af4 <vfscanf+0x204>
    19fc:	00 fd       	sbrc	r16, 0
    19fe:	07 c0       	rjmp	.+14     	; 0x1a0e <vfscanf+0x11e>
    1a00:	f5 01       	movw	r30, r10
    1a02:	80 80       	ld	r8, Z
    1a04:	91 80       	ldd	r9, Z+1	; 0x01
    1a06:	c5 01       	movw	r24, r10
    1a08:	02 96       	adiw	r24, 0x02	; 2
    1a0a:	5c 01       	movw	r10, r24
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <vfscanf+0x122>
    1a0e:	81 2c       	mov	r8, r1
    1a10:	91 2c       	mov	r9, r1
    1a12:	1e 36       	cpi	r17, 0x6E	; 110
    1a14:	49 f4       	brne	.+18     	; 0x1a28 <vfscanf+0x138>
    1a16:	f6 01       	movw	r30, r12
    1a18:	46 81       	ldd	r20, Z+6	; 0x06
    1a1a:	57 81       	ldd	r21, Z+7	; 0x07
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	20 2f       	mov	r18, r16
    1a22:	c4 01       	movw	r24, r8
    1a24:	b3 dd       	rcall	.-1178   	; 0x158c <putval>
    1a26:	7a cf       	rjmp	.-268    	; 0x191c <vfscanf+0x2c>
    1a28:	13 36       	cpi	r17, 0x63	; 99
    1a2a:	a1 f4       	brne	.+40     	; 0x1a54 <vfscanf+0x164>
    1a2c:	01 fd       	sbrc	r16, 1
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <vfscanf+0x144>
    1a30:	ff 24       	eor	r15, r15
    1a32:	f3 94       	inc	r15
    1a34:	c6 01       	movw	r24, r12
    1a36:	9c d0       	rcall	.+312    	; 0x1b70 <fgetc>
    1a38:	97 fd       	sbrc	r25, 7
    1a3a:	5a c0       	rjmp	.+180    	; 0x1af0 <vfscanf+0x200>
    1a3c:	81 14       	cp	r8, r1
    1a3e:	91 04       	cpc	r9, r1
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <vfscanf+0x15c>
    1a42:	f4 01       	movw	r30, r8
    1a44:	80 83       	st	Z, r24
    1a46:	c4 01       	movw	r24, r8
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	4c 01       	movw	r8, r24
    1a4c:	fa 94       	dec	r15
    1a4e:	f1 10       	cpse	r15, r1
    1a50:	f1 cf       	rjmp	.-30     	; 0x1a34 <vfscanf+0x144>
    1a52:	4a c0       	rjmp	.+148    	; 0x1ae8 <vfscanf+0x1f8>
    1a54:	1b 35       	cpi	r17, 0x5B	; 91
    1a56:	51 f4       	brne	.+20     	; 0x1a6c <vfscanf+0x17c>
    1a58:	9e 01       	movw	r18, r28
    1a5a:	a4 01       	movw	r20, r8
    1a5c:	6f 2d       	mov	r22, r15
    1a5e:	c6 01       	movw	r24, r12
    1a60:	68 de       	rcall	.-816    	; 0x1732 <conv_brk>
    1a62:	ec 01       	movw	r28, r24
    1a64:	89 2b       	or	r24, r25
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <vfscanf+0x17a>
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <vfscanf+0x1f8>
    1a6a:	39 c0       	rjmp	.+114    	; 0x1ade <vfscanf+0x1ee>
    1a6c:	c6 01       	movw	r24, r12
    1a6e:	c1 dd       	rcall	.-1150   	; 0x15f2 <skip_spaces>
    1a70:	97 fd       	sbrc	r25, 7
    1a72:	3e c0       	rjmp	.+124    	; 0x1af0 <vfscanf+0x200>
    1a74:	1f 36       	cpi	r17, 0x6F	; 111
    1a76:	49 f1       	breq	.+82     	; 0x1aca <vfscanf+0x1da>
    1a78:	28 f4       	brcc	.+10     	; 0x1a84 <vfscanf+0x194>
    1a7a:	14 36       	cpi	r17, 0x64	; 100
    1a7c:	21 f1       	breq	.+72     	; 0x1ac6 <vfscanf+0x1d6>
    1a7e:	19 36       	cpi	r17, 0x69	; 105
    1a80:	39 f1       	breq	.+78     	; 0x1ad0 <vfscanf+0x1e0>
    1a82:	25 c0       	rjmp	.+74     	; 0x1ace <vfscanf+0x1de>
    1a84:	13 37       	cpi	r17, 0x73	; 115
    1a86:	71 f0       	breq	.+28     	; 0x1aa4 <vfscanf+0x1b4>
    1a88:	15 37       	cpi	r17, 0x75	; 117
    1a8a:	e9 f0       	breq	.+58     	; 0x1ac6 <vfscanf+0x1d6>
    1a8c:	20 c0       	rjmp	.+64     	; 0x1ace <vfscanf+0x1de>
    1a8e:	81 14       	cp	r8, r1
    1a90:	91 04       	cpc	r9, r1
    1a92:	29 f0       	breq	.+10     	; 0x1a9e <vfscanf+0x1ae>
    1a94:	f4 01       	movw	r30, r8
    1a96:	60 82       	st	Z, r6
    1a98:	c4 01       	movw	r24, r8
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	4c 01       	movw	r8, r24
    1a9e:	fa 94       	dec	r15
    1aa0:	ff 20       	and	r15, r15
    1aa2:	59 f0       	breq	.+22     	; 0x1aba <vfscanf+0x1ca>
    1aa4:	c6 01       	movw	r24, r12
    1aa6:	64 d0       	rcall	.+200    	; 0x1b70 <fgetc>
    1aa8:	3c 01       	movw	r6, r24
    1aaa:	97 fd       	sbrc	r25, 7
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <vfscanf+0x1ca>
    1aae:	37 d0       	rcall	.+110    	; 0x1b1e <isspace>
    1ab0:	89 2b       	or	r24, r25
    1ab2:	69 f3       	breq	.-38     	; 0x1a8e <vfscanf+0x19e>
    1ab4:	b6 01       	movw	r22, r12
    1ab6:	c3 01       	movw	r24, r6
    1ab8:	d5 d0       	rcall	.+426    	; 0x1c64 <ungetc>
    1aba:	81 14       	cp	r8, r1
    1abc:	91 04       	cpc	r9, r1
    1abe:	a1 f0       	breq	.+40     	; 0x1ae8 <vfscanf+0x1f8>
    1ac0:	f4 01       	movw	r30, r8
    1ac2:	10 82       	st	Z, r1
    1ac4:	11 c0       	rjmp	.+34     	; 0x1ae8 <vfscanf+0x1f8>
    1ac6:	00 62       	ori	r16, 0x20	; 32
    1ac8:	03 c0       	rjmp	.+6      	; 0x1ad0 <vfscanf+0x1e0>
    1aca:	00 61       	ori	r16, 0x10	; 16
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <vfscanf+0x1e0>
    1ace:	00 64       	ori	r16, 0x40	; 64
    1ad0:	20 2f       	mov	r18, r16
    1ad2:	a4 01       	movw	r20, r8
    1ad4:	6f 2d       	mov	r22, r15
    1ad6:	c6 01       	movw	r24, r12
    1ad8:	a2 dd       	rcall	.-1212   	; 0x161e <conv_int>
    1ada:	81 11       	cpse	r24, r1
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <vfscanf+0x1f8>
    1ade:	f6 01       	movw	r30, r12
    1ae0:	83 81       	ldd	r24, Z+3	; 0x03
    1ae2:	80 73       	andi	r24, 0x30	; 48
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <vfscanf+0x200>
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <vfscanf+0x204>
    1ae8:	00 fd       	sbrc	r16, 0
    1aea:	18 cf       	rjmp	.-464    	; 0x191c <vfscanf+0x2c>
    1aec:	53 94       	inc	r5
    1aee:	16 cf       	rjmp	.-468    	; 0x191c <vfscanf+0x2c>
    1af0:	55 20       	and	r5, r5
    1af2:	19 f0       	breq	.+6      	; 0x1afa <vfscanf+0x20a>
    1af4:	85 2d       	mov	r24, r5
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <vfscanf+0x20e>
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	9f ef       	ldi	r25, 0xFF	; 255
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	bf 90       	pop	r11
    1b10:	af 90       	pop	r10
    1b12:	9f 90       	pop	r9
    1b14:	8f 90       	pop	r8
    1b16:	7f 90       	pop	r7
    1b18:	6f 90       	pop	r6
    1b1a:	5f 90       	pop	r5
    1b1c:	08 95       	ret

00001b1e <isspace>:
    1b1e:	91 11       	cpse	r25, r1
    1b20:	18 c1       	rjmp	.+560    	; 0x1d52 <__ctype_isfalse>
    1b22:	80 32       	cpi	r24, 0x20	; 32
    1b24:	19 f0       	breq	.+6      	; 0x1b2c <isspace+0xe>
    1b26:	89 50       	subi	r24, 0x09	; 9
    1b28:	85 50       	subi	r24, 0x05	; 5
    1b2a:	d0 f7       	brcc	.-12     	; 0x1b20 <isspace+0x2>
    1b2c:	08 95       	ret

00001b2e <strchr_P>:
    1b2e:	fc 01       	movw	r30, r24
    1b30:	05 90       	lpm	r0, Z+
    1b32:	06 16       	cp	r0, r22
    1b34:	21 f0       	breq	.+8      	; 0x1b3e <strchr_P+0x10>
    1b36:	00 20       	and	r0, r0
    1b38:	d9 f7       	brne	.-10     	; 0x1b30 <strchr_P+0x2>
    1b3a:	c0 01       	movw	r24, r0
    1b3c:	08 95       	ret
    1b3e:	31 97       	sbiw	r30, 0x01	; 1
    1b40:	cf 01       	movw	r24, r30
    1b42:	08 95       	ret

00001b44 <strnlen_P>:
    1b44:	fc 01       	movw	r30, r24
    1b46:	05 90       	lpm	r0, Z+
    1b48:	61 50       	subi	r22, 0x01	; 1
    1b4a:	70 40       	sbci	r23, 0x00	; 0
    1b4c:	01 10       	cpse	r0, r1
    1b4e:	d8 f7       	brcc	.-10     	; 0x1b46 <strnlen_P+0x2>
    1b50:	80 95       	com	r24
    1b52:	90 95       	com	r25
    1b54:	8e 0f       	add	r24, r30
    1b56:	9f 1f       	adc	r25, r31
    1b58:	08 95       	ret

00001b5a <strnlen>:
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	61 50       	subi	r22, 0x01	; 1
    1b5e:	70 40       	sbci	r23, 0x00	; 0
    1b60:	01 90       	ld	r0, Z+
    1b62:	01 10       	cpse	r0, r1
    1b64:	d8 f7       	brcc	.-10     	; 0x1b5c <strnlen+0x2>
    1b66:	80 95       	com	r24
    1b68:	90 95       	com	r25
    1b6a:	8e 0f       	add	r24, r30
    1b6c:	9f 1f       	adc	r25, r31
    1b6e:	08 95       	ret

00001b70 <fgetc>:
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
    1b76:	2b 81       	ldd	r18, Y+3	; 0x03
    1b78:	20 ff       	sbrs	r18, 0
    1b7a:	33 c0       	rjmp	.+102    	; 0x1be2 <fgetc+0x72>
    1b7c:	26 ff       	sbrs	r18, 6
    1b7e:	0a c0       	rjmp	.+20     	; 0x1b94 <fgetc+0x24>
    1b80:	2f 7b       	andi	r18, 0xBF	; 191
    1b82:	2b 83       	std	Y+3, r18	; 0x03
    1b84:	8e 81       	ldd	r24, Y+6	; 0x06
    1b86:	9f 81       	ldd	r25, Y+7	; 0x07
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	9f 83       	std	Y+7, r25	; 0x07
    1b8c:	8e 83       	std	Y+6, r24	; 0x06
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	29 c0       	rjmp	.+82     	; 0x1be6 <fgetc+0x76>
    1b94:	22 ff       	sbrs	r18, 2
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <fgetc+0x46>
    1b98:	e8 81       	ld	r30, Y
    1b9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b9c:	80 81       	ld	r24, Z
    1b9e:	08 2e       	mov	r0, r24
    1ba0:	00 0c       	add	r0, r0
    1ba2:	99 0b       	sbc	r25, r25
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	19 f4       	brne	.+6      	; 0x1bae <fgetc+0x3e>
    1ba8:	20 62       	ori	r18, 0x20	; 32
    1baa:	2b 83       	std	Y+3, r18	; 0x03
    1bac:	1a c0       	rjmp	.+52     	; 0x1be2 <fgetc+0x72>
    1bae:	31 96       	adiw	r30, 0x01	; 1
    1bb0:	f9 83       	std	Y+1, r31	; 0x01
    1bb2:	e8 83       	st	Y, r30
    1bb4:	0e c0       	rjmp	.+28     	; 0x1bd2 <fgetc+0x62>
    1bb6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1bb8:	fb 85       	ldd	r31, Y+11	; 0x0b
    1bba:	09 95       	icall
    1bbc:	97 ff       	sbrs	r25, 7
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <fgetc+0x62>
    1bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	11 f0       	breq	.+4      	; 0x1bca <fgetc+0x5a>
    1bc6:	80 e2       	ldi	r24, 0x20	; 32
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <fgetc+0x5c>
    1bca:	80 e1       	ldi	r24, 0x10	; 16
    1bcc:	82 2b       	or	r24, r18
    1bce:	8b 83       	std	Y+3, r24	; 0x03
    1bd0:	08 c0       	rjmp	.+16     	; 0x1be2 <fgetc+0x72>
    1bd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bda:	3f 83       	std	Y+7, r19	; 0x07
    1bdc:	2e 83       	std	Y+6, r18	; 0x06
    1bde:	99 27       	eor	r25, r25
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <fgetc+0x76>
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	9f ef       	ldi	r25, 0xFF	; 255
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <fputc>:
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	fb 01       	movw	r30, r22
    1bf6:	23 81       	ldd	r18, Z+3	; 0x03
    1bf8:	21 fd       	sbrc	r18, 1
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <fputc+0x16>
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	9f ef       	ldi	r25, 0xFF	; 255
    1c00:	2c c0       	rjmp	.+88     	; 0x1c5a <fputc+0x6e>
    1c02:	22 ff       	sbrs	r18, 2
    1c04:	16 c0       	rjmp	.+44     	; 0x1c32 <fputc+0x46>
    1c06:	46 81       	ldd	r20, Z+6	; 0x06
    1c08:	57 81       	ldd	r21, Z+7	; 0x07
    1c0a:	24 81       	ldd	r18, Z+4	; 0x04
    1c0c:	35 81       	ldd	r19, Z+5	; 0x05
    1c0e:	42 17       	cp	r20, r18
    1c10:	53 07       	cpc	r21, r19
    1c12:	44 f4       	brge	.+16     	; 0x1c24 <fputc+0x38>
    1c14:	a0 81       	ld	r26, Z
    1c16:	b1 81       	ldd	r27, Z+1	; 0x01
    1c18:	9d 01       	movw	r18, r26
    1c1a:	2f 5f       	subi	r18, 0xFF	; 255
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	31 83       	std	Z+1, r19	; 0x01
    1c20:	20 83       	st	Z, r18
    1c22:	8c 93       	st	X, r24
    1c24:	26 81       	ldd	r18, Z+6	; 0x06
    1c26:	37 81       	ldd	r19, Z+7	; 0x07
    1c28:	2f 5f       	subi	r18, 0xFF	; 255
    1c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2c:	37 83       	std	Z+7, r19	; 0x07
    1c2e:	26 83       	std	Z+6, r18	; 0x06
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <fputc+0x6e>
    1c32:	8b 01       	movw	r16, r22
    1c34:	ec 01       	movw	r28, r24
    1c36:	fb 01       	movw	r30, r22
    1c38:	00 84       	ldd	r0, Z+8	; 0x08
    1c3a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c3c:	e0 2d       	mov	r30, r0
    1c3e:	09 95       	icall
    1c40:	89 2b       	or	r24, r25
    1c42:	e1 f6       	brne	.-72     	; 0x1bfc <fputc+0x10>
    1c44:	d8 01       	movw	r26, r16
    1c46:	16 96       	adiw	r26, 0x06	; 6
    1c48:	8d 91       	ld	r24, X+
    1c4a:	9c 91       	ld	r25, X
    1c4c:	17 97       	sbiw	r26, 0x07	; 7
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	17 96       	adiw	r26, 0x07	; 7
    1c52:	9c 93       	st	X, r25
    1c54:	8e 93       	st	-X, r24
    1c56:	16 97       	sbiw	r26, 0x06	; 6
    1c58:	ce 01       	movw	r24, r28
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	08 95       	ret

00001c64 <ungetc>:
    1c64:	fb 01       	movw	r30, r22
    1c66:	23 81       	ldd	r18, Z+3	; 0x03
    1c68:	20 ff       	sbrs	r18, 0
    1c6a:	12 c0       	rjmp	.+36     	; 0x1c90 <ungetc+0x2c>
    1c6c:	26 fd       	sbrc	r18, 6
    1c6e:	10 c0       	rjmp	.+32     	; 0x1c90 <ungetc+0x2c>
    1c70:	8f 3f       	cpi	r24, 0xFF	; 255
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	93 07       	cpc	r25, r19
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <ungetc+0x2c>
    1c78:	82 83       	std	Z+2, r24	; 0x02
    1c7a:	2f 7d       	andi	r18, 0xDF	; 223
    1c7c:	20 64       	ori	r18, 0x40	; 64
    1c7e:	23 83       	std	Z+3, r18	; 0x03
    1c80:	26 81       	ldd	r18, Z+6	; 0x06
    1c82:	37 81       	ldd	r19, Z+7	; 0x07
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	31 09       	sbc	r19, r1
    1c88:	37 83       	std	Z+7, r19	; 0x07
    1c8a:	26 83       	std	Z+6, r18	; 0x06
    1c8c:	99 27       	eor	r25, r25
    1c8e:	08 95       	ret
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	9f ef       	ldi	r25, 0xFF	; 255
    1c94:	08 95       	ret

00001c96 <__ultoa_invert>:
    1c96:	fa 01       	movw	r30, r20
    1c98:	aa 27       	eor	r26, r26
    1c9a:	28 30       	cpi	r18, 0x08	; 8
    1c9c:	51 f1       	breq	.+84     	; 0x1cf2 <__ultoa_invert+0x5c>
    1c9e:	20 31       	cpi	r18, 0x10	; 16
    1ca0:	81 f1       	breq	.+96     	; 0x1d02 <__ultoa_invert+0x6c>
    1ca2:	e8 94       	clt
    1ca4:	6f 93       	push	r22
    1ca6:	6e 7f       	andi	r22, 0xFE	; 254
    1ca8:	6e 5f       	subi	r22, 0xFE	; 254
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	8f 4f       	sbci	r24, 0xFF	; 255
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	af 4f       	sbci	r26, 0xFF	; 255
    1cb2:	b1 e0       	ldi	r27, 0x01	; 1
    1cb4:	3e d0       	rcall	.+124    	; 0x1d32 <__ultoa_invert+0x9c>
    1cb6:	b4 e0       	ldi	r27, 0x04	; 4
    1cb8:	3c d0       	rcall	.+120    	; 0x1d32 <__ultoa_invert+0x9c>
    1cba:	67 0f       	add	r22, r23
    1cbc:	78 1f       	adc	r23, r24
    1cbe:	89 1f       	adc	r24, r25
    1cc0:	9a 1f       	adc	r25, r26
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	68 0f       	add	r22, r24
    1cc6:	79 1f       	adc	r23, r25
    1cc8:	8a 1f       	adc	r24, r26
    1cca:	91 1d       	adc	r25, r1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	6a 0f       	add	r22, r26
    1cd0:	71 1d       	adc	r23, r1
    1cd2:	81 1d       	adc	r24, r1
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	a1 1d       	adc	r26, r1
    1cd8:	20 d0       	rcall	.+64     	; 0x1d1a <__ultoa_invert+0x84>
    1cda:	09 f4       	brne	.+2      	; 0x1cde <__ultoa_invert+0x48>
    1cdc:	68 94       	set
    1cde:	3f 91       	pop	r19
    1ce0:	2a e0       	ldi	r18, 0x0A	; 10
    1ce2:	26 9f       	mul	r18, r22
    1ce4:	11 24       	eor	r1, r1
    1ce6:	30 19       	sub	r19, r0
    1ce8:	30 5d       	subi	r19, 0xD0	; 208
    1cea:	31 93       	st	Z+, r19
    1cec:	de f6       	brtc	.-74     	; 0x1ca4 <__ultoa_invert+0xe>
    1cee:	cf 01       	movw	r24, r30
    1cf0:	08 95       	ret
    1cf2:	46 2f       	mov	r20, r22
    1cf4:	47 70       	andi	r20, 0x07	; 7
    1cf6:	40 5d       	subi	r20, 0xD0	; 208
    1cf8:	41 93       	st	Z+, r20
    1cfa:	b3 e0       	ldi	r27, 0x03	; 3
    1cfc:	0f d0       	rcall	.+30     	; 0x1d1c <__ultoa_invert+0x86>
    1cfe:	c9 f7       	brne	.-14     	; 0x1cf2 <__ultoa_invert+0x5c>
    1d00:	f6 cf       	rjmp	.-20     	; 0x1cee <__ultoa_invert+0x58>
    1d02:	46 2f       	mov	r20, r22
    1d04:	4f 70       	andi	r20, 0x0F	; 15
    1d06:	40 5d       	subi	r20, 0xD0	; 208
    1d08:	4a 33       	cpi	r20, 0x3A	; 58
    1d0a:	18 f0       	brcs	.+6      	; 0x1d12 <__ultoa_invert+0x7c>
    1d0c:	49 5d       	subi	r20, 0xD9	; 217
    1d0e:	31 fd       	sbrc	r19, 1
    1d10:	40 52       	subi	r20, 0x20	; 32
    1d12:	41 93       	st	Z+, r20
    1d14:	02 d0       	rcall	.+4      	; 0x1d1a <__ultoa_invert+0x84>
    1d16:	a9 f7       	brne	.-22     	; 0x1d02 <__ultoa_invert+0x6c>
    1d18:	ea cf       	rjmp	.-44     	; 0x1cee <__ultoa_invert+0x58>
    1d1a:	b4 e0       	ldi	r27, 0x04	; 4
    1d1c:	a6 95       	lsr	r26
    1d1e:	97 95       	ror	r25
    1d20:	87 95       	ror	r24
    1d22:	77 95       	ror	r23
    1d24:	67 95       	ror	r22
    1d26:	ba 95       	dec	r27
    1d28:	c9 f7       	brne	.-14     	; 0x1d1c <__ultoa_invert+0x86>
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	61 05       	cpc	r22, r1
    1d2e:	71 05       	cpc	r23, r1
    1d30:	08 95       	ret
    1d32:	9b 01       	movw	r18, r22
    1d34:	ac 01       	movw	r20, r24
    1d36:	0a 2e       	mov	r0, r26
    1d38:	06 94       	lsr	r0
    1d3a:	57 95       	ror	r21
    1d3c:	47 95       	ror	r20
    1d3e:	37 95       	ror	r19
    1d40:	27 95       	ror	r18
    1d42:	ba 95       	dec	r27
    1d44:	c9 f7       	brne	.-14     	; 0x1d38 <__ultoa_invert+0xa2>
    1d46:	62 0f       	add	r22, r18
    1d48:	73 1f       	adc	r23, r19
    1d4a:	84 1f       	adc	r24, r20
    1d4c:	95 1f       	adc	r25, r21
    1d4e:	a0 1d       	adc	r26, r0
    1d50:	08 95       	ret

00001d52 <__ctype_isfalse>:
    1d52:	99 27       	eor	r25, r25
    1d54:	88 27       	eor	r24, r24

00001d56 <__ctype_istrue>:
    1d56:	08 95       	ret

00001d58 <eeprom_read_block>:
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22

00001d5c <eeprom_read_blraw>:
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	f9 99       	sbic	0x1f, 1	; 31
    1d60:	fe cf       	rjmp	.-4      	; 0x1d5e <eeprom_read_blraw+0x2>
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <eeprom_read_blraw+0x14>
    1d64:	f2 bd       	out	0x22, r31	; 34
    1d66:	e1 bd       	out	0x21, r30	; 33
    1d68:	f8 9a       	sbi	0x1f, 0	; 31
    1d6a:	31 96       	adiw	r30, 0x01	; 1
    1d6c:	00 b4       	in	r0, 0x20	; 32
    1d6e:	0d 92       	st	X+, r0
    1d70:	41 50       	subi	r20, 0x01	; 1
    1d72:	50 40       	sbci	r21, 0x00	; 0
    1d74:	b8 f7       	brcc	.-18     	; 0x1d64 <eeprom_read_blraw+0x8>
    1d76:	08 95       	ret

00001d78 <eeprom_read_word>:
    1d78:	a8 e1       	ldi	r26, 0x18	; 24
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	42 e0       	ldi	r20, 0x02	; 2
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	ed cf       	rjmp	.-38     	; 0x1d5c <eeprom_read_blraw>

00001d82 <eeprom_write_block>:
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <eeprom_write_block+0xa>
    1d88:	2d 91       	ld	r18, X+
    1d8a:	05 d0       	rcall	.+10     	; 0x1d96 <eeprom_write_r18>
    1d8c:	41 50       	subi	r20, 0x01	; 1
    1d8e:	50 40       	sbci	r21, 0x00	; 0
    1d90:	d8 f7       	brcc	.-10     	; 0x1d88 <eeprom_write_block+0x6>
    1d92:	08 95       	ret

00001d94 <eeprom_write_byte>:
    1d94:	26 2f       	mov	r18, r22

00001d96 <eeprom_write_r18>:
    1d96:	f9 99       	sbic	0x1f, 1	; 31
    1d98:	fe cf       	rjmp	.-4      	; 0x1d96 <eeprom_write_r18>
    1d9a:	1f ba       	out	0x1f, r1	; 31
    1d9c:	92 bd       	out	0x22, r25	; 34
    1d9e:	81 bd       	out	0x21, r24	; 33
    1da0:	20 bd       	out	0x20, r18	; 32
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	fa 9a       	sbi	0x1f, 2	; 31
    1da8:	f9 9a       	sbi	0x1f, 1	; 31
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	08 95       	ret

00001db0 <eeprom_write_word>:
    1db0:	f1 df       	rcall	.-30     	; 0x1d94 <eeprom_write_byte>
    1db2:	27 2f       	mov	r18, r23
    1db4:	f0 cf       	rjmp	.-32     	; 0x1d96 <eeprom_write_r18>

00001db6 <_exit>:
    1db6:	f8 94       	cli

00001db8 <__stop_program>:
    1db8:	ff cf       	rjmp	.-2      	; 0x1db8 <__stop_program>
